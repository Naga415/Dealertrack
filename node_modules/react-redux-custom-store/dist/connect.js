'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return function (Component) {
    var storeName = arguments.length <= 1 || arguments[1] === undefined ? 'store' : arguments[1];

    // Return the "normal" connected component from `react-redux`.
    // Then wrap it and pass the store with the custom name as a `prop`,
    // after picking it from `context`.
    var ConnectedComponent = _reactRedux.connect.apply(undefined, args)(Component);

    var Wrapper = function Wrapper(props, context) {
      return _react2.default.createElement(ConnectedComponent, (0, _extends3.default)({}, props, { store: context[storeName] }));
    };

    Wrapper.displayName = 'WrappedConnect(' + ConnectedComponent.displayName + ')';
    Wrapper.contextTypes = (0, _defineProperty3.default)({}, storeName, _react.PropTypes.object);

    return Wrapper;
  };
};