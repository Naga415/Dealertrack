"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pushFeeQuoteFee = exports.fetchExistingFeeQuoteFee = exports.saveQuoteFees = exports.validateQuoteFees = exports.cancelEditing = exports.refreshForm = exports.appendFee = exports.deleteFee = exports.handleBlurFromInput = exports.handleChangeFromInput = exports.handleChangeFromForm = exports.fetchExistingFeeQuoteFeeSuccess = exports.FeesURL = undefined;

var _axios = require("axios");

var _axios2 = _interopRequireDefault(_axios);

var _actionTypes = require("./actionTypes");

var types = _interopRequireWildcard(_actionTypes);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FeesURL = exports.FeesURL = "http://swaggerhub.np.aws.dealertrack.com/virts/Denzil-Tarakan/dealstransformers/1.0.0/123/quote/345/fee/";

/* Sync actions */

var fetchExistingFeeQuoteFeeSuccess = exports.fetchExistingFeeQuoteFeeSuccess = function fetchExistingFeeQuoteFeeSuccess(data) {
  return {
    type: types.FETCH_EXISTING_FEE_QUOTE_FEE_SUCCESS,
    payload: {
      fees: data.fees,
      quoteFees: data.quote_fees
    }
  };
};

var handleChangeFromForm = exports.handleChangeFromForm = function handleChangeFromForm(attr, e) {
  return {
    type: types.HANDLE_CHANGE_FROM_FORM,
    payload: {
      attr: attr,
      value: e.target.type === "checkbox" ? e.target.checked : e.target.value,
      name: e.target.name
    }
  };
};

var handleChangeFromInput = exports.handleChangeFromInput = function handleChangeFromInput(e) {
  return {
    type: types.HANDLE_CHANGE_FROM_INPUT,
    payload: {
      value: e.target.value,
      name: e.target.name
    }
  };
};

var handleBlurFromInput = exports.handleBlurFromInput = function handleBlurFromInput(e) {
  return {
    type: types.HANDLE_BLUR_FROM_INPUT,
    payload: {
      value: e.target.value,
      name: e.target.name
    }
  };
};

var deleteFee = exports.deleteFee = function deleteFee(index) {
  return {
    type: types.DELETE_FEE,
    payload: {
      index: index
    }
  };
};

var appendFee = exports.appendFee = function appendFee() {
  return {
    type: types.APPEND_FEE
  };
};

var refreshForm = exports.refreshForm = function refreshForm() {
  return {
    type: types.REFRESH_FORM
  };
};

var cancelEditing = exports.cancelEditing = function cancelEditing() {
  return {
    type: types.CANCEL_EDITING
  };
};

var validateQuoteFees = exports.validateQuoteFees = function validateQuoteFees(data) {
  var tmpError = {
    "Fee Type": false,
    "Fee Name": false,
    Amount: false,
    "Paid To Code": false
  };
  var tmpStatus = false;

  for (var i = 0; i < data.length; i++) {
    tmpError["Fee Type"] = data[i].feeType === null || data[i].feeType === "" || tmpError["Fee Type"];
    tmpError["Fee Name"] = data[i].feeCustomName === null || data[i].feeCustomName === "" || tmpError["Fee Name"];
    tmpError["Amount"] = data[i].feeAmount === 0 || data[i].feeAmount === "NaN" || tmpError["Amount"];
    tmpError["Paid To Code"] = data[i].paidTo === null || data[i].paidTo === "" || tmpError["Paid To Code"];
  }

  for (var keys in tmpError) {
    if (tmpError[keys]) tmpStatus = true;
  }

  return {
    type: types.VALIDATE_QUOTE_FEES,
    payload: {
      error: tmpError,
      formHasError: tmpStatus
    }
  };
};

var saveQuoteFees = exports.saveQuoteFees = function saveQuoteFees() {
  return {
    type: types.SAVE_QUOTE_FEES
  };
};

/* Async actions */
// eslint-disable-next-line
var fetchExistingFeeQuoteFee = exports.fetchExistingFeeQuoteFee = function fetchExistingFeeQuoteFee(dealId, scenarioId) {
  return function (dispatch) {
    return _axios2.default.get(FeesURL).then(function (data) {
      return dispatch(fetchExistingFeeQuoteFeeSuccess(data.data));
    });
  };
};

// eslint-disable-next-line
var pushFeeQuoteFee = exports.pushFeeQuoteFee = function pushFeeQuoteFee(data, dealId, scenarioId) {
  return function () {
    return _axios2.default.put(FeesURL, data, {
      headers: { Authorization: "dt_test_token" }
    });
  };
};