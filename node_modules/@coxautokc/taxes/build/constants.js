'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.feeTaxSetupTableData = exports.capReductionTaxMethodOptions = exports.capReductionTaxOptions = exports.monthlyTaxMethodOptions = exports.monthlyUseTaxOptions = exports.leaseTradeCreditOptions = exports.leaseTaxMethodOptions = exports.leaseTaxOptions = exports.retailTradeCreditOptions = exports.retailTaxMethodOptions = exports.retailTaxOptions = exports.profileOptions = exports.TaxesPageTabs = exports.taxSetupDataUrl = undefined;

var _mockUtils = require('./utils/mock-utils');

/* Mock URLs */

var taxSetupDataUrl = exports.taxSetupDataUrl = 'http://localhost:3002/db';

/* Enums */

var TaxesPageTabs = exports.TaxesPageTabs = {
  "tax-setup": 1,
  "fee-tax-setup": 2,
  "product-category-tax-setup": 3
};

/* Dummy Options */

var additionalMethodOptions = [{
  value: 10,
  label: 'Monthly Payment'
}, {
  value: 11,
  label: 'Sale Price/Doc Fee/ESC'
}, {
  value: 12,
  label: 'Bitcoin Payment'
}, {
  value: 13,
  label: 'Paypal'
}];

var profileOptions = exports.profileOptions = (0, _mockUtils.generateNumArray)(2).map(function (n) {
  return {
    value: n,
    label: 'Profile ' + n
  };
});

var retailTaxOptions = exports.retailTaxOptions = (0, _mockUtils.generateNumArray)(3).map(function (n) {
  return {
    value: n,
    label: 'Retail Tax ' + n
  };
});
var retailTaxMethodOptions = exports.retailTaxMethodOptions = (0, _mockUtils.generateNumArray)(3).map(function (n) {
  return {
    value: n,
    label: 'Retail Method ' + n
  };
}).concat(additionalMethodOptions);

var retailTradeCreditOptions = exports.retailTradeCreditOptions = (0, _mockUtils.generateNumArray)(3).map(function (n) {
  return {
    value: n,
    label: 'Retail Trade Credit ' + n
  };
});

var leaseTaxOptions = exports.leaseTaxOptions = (0, _mockUtils.generateNumArray)(3).map(function (n) {
  return {
    value: n,
    label: 'Lease Tax ' + n
  };
});

var leaseTaxMethodOptions = exports.leaseTaxMethodOptions = (0, _mockUtils.generateNumArray)(3).map(function (n) {
  return {
    value: n,
    label: 'Lease Method ' + n
  };
}).concat(additionalMethodOptions);

var leaseTradeCreditOptions = exports.leaseTradeCreditOptions = (0, _mockUtils.generateNumArray)(3).map(function (n) {
  return {
    value: n,
    label: 'Lease Trade Credit ' + n
  };
});

var monthlyUseTaxOptions = exports.monthlyUseTaxOptions = (0, _mockUtils.generateNumArray)(3).map(function (n) {
  return {
    value: n,
    label: 'Montly Use Tax ' + n
  };
});

var monthlyTaxMethodOptions = exports.monthlyTaxMethodOptions = (0, _mockUtils.generateNumArray)(3).map(function (n) {
  return {
    value: n,
    label: 'Monthly TaxMethod ' + n
  };
}).concat(additionalMethodOptions);

var capReductionTaxOptions = exports.capReductionTaxOptions = (0, _mockUtils.generateNumArray)(3).map(function (n) {
  return {
    value: n,
    label: 'Cap Reduction ' + n
  };
});

var capReductionTaxMethodOptions = exports.capReductionTaxMethodOptions = (0, _mockUtils.generateNumArray)(3).map(function (n) {
  return {
    value: n,
    label: 'Cap Reduction Method ' + n
  };
}).concat(additionalMethodOptions);

var feeTaxSetupTableData = exports.feeTaxSetupTableData = (0, _mockUtils.generateNumArray)(3).map(function (n) {
  return {
    feeType: 'Fee Type ' + n
  };
});