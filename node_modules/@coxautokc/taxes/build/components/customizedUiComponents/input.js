"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Input = function (_Component) {
  _inherits(Input, _Component);

  function Input() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Input);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Input.__proto__ || Object.getPrototypeOf(Input)).call.apply(_ref, [this].concat(args))), _this), _this.onChange = function (e) {
      _this.props.onChange(e.target.value);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Input, [{
    key: "render",
    value: function render() {
      var _props = this.props,
          name = _props.name,
          label = _props.label,
          value = _props.value,
          disabled = _props.disabled,
          addOnIndentation = _props.addOnIndentation,
          addOnClassName = _props.addOnClassName;


      if (!addOnClassName) {
        return _react2.default.createElement(
          "div",
          { className: "form-group-taxes" },
          _react2.default.createElement(
            "label",
            { htmlFor: name },
            label
          ),
          _react2.default.createElement("input", {
            name: name,
            type: "number",
            className: "form-control",
            disabled: !!disabled,
            value: value,
            onChange: this.onChange
          })
        );
      }

      return _react2.default.createElement(
        "div",
        { className: "form-group-taxes" },
        _react2.default.createElement(
          "label",
          { htmlFor: name },
          label
        ),
        _react2.default.createElement(
          "div",
          { className: "input-group" },
          addOnIndentation === "left" && _react2.default.createElement(
            "span",
            { className: "input-group-addon" },
            _react2.default.createElement("i", { className: addOnClassName })
          ),
          _react2.default.createElement("input", {
            name: name,
            type: "number",
            className: "form-control",
            disabled: !!disabled,
            value: value,
            onChange: this.onChange
          }),
          addOnIndentation === "right" && _react2.default.createElement(
            "span",
            { className: "input-group-addon" },
            _react2.default.createElement("i", { className: addOnClassName })
          )
        )
      );
    }
  }]);

  return Input;
}(_react.Component);

exports.default = Input;


Input.propTypes = {
  addOnClassName: _propTypes2.default.string,
  addOnIndentation: _propTypes2.default.string,
  disabled: _propTypes2.default.bool,
  label: _propTypes2.default.string.isRequired,
  name: _propTypes2.default.string.isRequired,
  onChange: _propTypes2.default.func.isRequired,
  value: _propTypes2.default.string.isRequired
};