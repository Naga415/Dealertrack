"use strict";

var _taxSetupReducers = require("../tax-setup-reducers");

var _taxSetupReducers2 = _interopRequireDefault(_taxSetupReducers);

var _taxesPageActions = require("../../actions/taxes-page-actions");

var _taxSetupMock = require("../../api/tax-setup-mock.json");

var _taxSetupMock2 = _interopRequireDefault(_taxSetupMock);

var _chai = require("chai");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

describe("Taxsetup Reducers", function () {
  it("updates store when Taxsetup data is retrieved", function (done) {
    var expectedNextState = {
      capReductionTaxMethod: {
        value: 12,
        label: "Acq,Rebate"
      },
      capReductionTaxPercent: "4",
      capTaxFees: true,
      capTaxProducts: true,
      leaseFlat: "415",
      leaseTaxFees: false,
      leaseTaxMethod: {
        label: "Sales Price/Doc Fee/ESC",
        value: 13
      },
      leaseTaxPercent: "4",
      leaseTaxProducts: false,
      leaseTradeCredit: {
        label: "Leaser of payoff and allowance",
        value: 2
      },
      leaseTradeCreditAmount: "223",
      monthlyTaxFees: true,
      monthlyTaxMethod: {
        label: "Monthly Payment",
        value: 10
      },
      monthlyTaxProducts: false,
      monthlyUseTaxPercent: "33",
      retailFlat: "500",
      retailTaxFees: false,
      retailTaxMethod: {
        label: "Sale Price/Doc Fee/ESC",
        value: 11
      },
      retailTaxPercent: "4",
      retailTaxProducts: true,
      retailTradeCredit: {
        label: "Customer Trade Equity",
        value: 2
      },
      retailTradeCreditAmount: "45"
    };

    var action = (0, _taxesPageActions.fetchFeeTaxSetupTableDataSuccess)(_taxSetupMock2.default);
    var prevState = {};
    var actualNextState = (0, _taxSetupReducers2.default)(prevState, action);
    (0, _chai.assert)(actualNextState, expectedNextState);
    done();
  });

  it("updates store when a input field is changed", function (done) {
    var testField = "testField";
    var prevState = _defineProperty({}, testField, "testValuePrevious");
    var newValue = "testValueUpdated";
    var action = (0, _taxesPageActions.updateTaxSetupInput)(testField, newValue);
    var actualNextState = (0, _taxSetupReducers2.default)(prevState, action);
    (0, _chai.assert)(actualNextState[testField], newValue);
    done();
  });
});