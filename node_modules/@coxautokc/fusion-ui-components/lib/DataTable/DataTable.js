'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _griddleReact = require('griddle-react');

var _griddleReact2 = _interopRequireDefault(_griddleReact);

var _titleCase = require('title-case');

var _titleCase2 = _interopRequireDefault(_titleCase);

var _DataTableSettings = require('./DataTableSettings');

var _DataTableSettings2 = _interopRequireDefault(_DataTableSettings);

var _DataTablePagination = require('./DataTablePagination');

var _DataTablePagination2 = _interopRequireDefault(_DataTablePagination);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var styleConfig = {
  icons: {
    TableHeadingCell: {
      sortDescendingIcon: '▼',
      sortAscendingIcon: '▲'
    }
  },
  classNames: {
    Filter: 'griddle-filter form-control',
    NextButton: 'griddle-next-button btn btn-default',
    PreviousButton: 'griddle-previous-button btn btn-default',
    SettingsToggle: 'griddle-settings-toggle btn btn-default'
  }
};

/** Paginated, sortable, filterable tabular grid */

var DataTable = function (_React$Component) {
  _inherits(DataTable, _React$Component);

  function DataTable(props) {
    _classCallCheck(this, DataTable);

    var _this = _possibleConstructorReturn(this, (DataTable.__proto__ || Object.getPrototypeOf(DataTable)).call(this, props));

    _this.onChange = function (pageSize) {
      _this.setState({ pageSize: pageSize });
    };

    _this.state = {
      pageSize: _this.props.displayPagination ? _this.props.pageSize || _this.props.pageSizeOptions[0] : _this.props.pageSize || _this.props.data.length,
      currentPage: 1
    };
    return _this;
  }

  _createClass(DataTable, [{
    key: 'getColumnTitle',
    value: function getColumnTitle(column, columnHeaders) {
      for (var columnHeader in columnHeaders) {
        if (columnHeaders[columnHeader].columnName === column) {
          return columnHeaders[columnHeader].displayName;
        }
      }
      return (0, _titleCase2.default)(column);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          data = _props.data,
          columns = _props.columns,
          columnWidths = _props.columnWidths,
          pageSizeOptions = _props.pageSizeOptions,
          columnHeaders = _props.columnHeaders,
          displayFilter = _props.displayFilter,
          displaySettings = _props.displaySettings,
          displayPagination = _props.displayPagination,
          htmlId = _props.htmlId,
          className = _props.className;
      var _state = this.state,
          pageSize = _state.pageSize,
          currentPage = _state.currentPage;


      var components = {
        Settings: function Settings() {
          return _react2.default.createElement(_DataTableSettings2.default, { onChange: _this2.onChange, value: pageSize, pageSizeOptions: pageSizeOptions });
        },
        PageDropdown: function PageDropdown(props) {
          return _react2.default.createElement(_DataTablePagination2.default, props);
        },
        NextButton: function NextButton() {
          return null;
        },
        PreviousButton: function PreviousButton() {
          return null;
        }
      };

      if (!displaySettings) {
        components.SettingsToggle = function () {
          return null;
        };
      }

      if (!displayFilter) {
        components.Filter = function () {
          return null;
        };
      }

      if (!displayPagination) {
        components.Pagination = function () {
          return null;
        };
      }

      return _react2.default.createElement(
        'div',
        {
          className: "data-table griddle " + className,
          id: htmlId
        },
        _react2.default.createElement(
          _griddleReact2.default,
          {
            data: data,
            plugins: [_griddleReact.plugins.LocalPlugin],
            styleConfig: styleConfig,
            pageProperties: {
              pageSize: pageSize,
              currentPage: currentPage
            },
            components: components
          },
          _react2.default.createElement(
            _griddleReact.RowDefinition,
            null,
            columns.map(function (column, index) {
              return _react2.default.createElement(_griddleReact.ColumnDefinition, {
                key: column,
                id: column,
                width: columnWidths ? columnWidths[index] : null,
                title: columnHeaders ? _this2.getColumnTitle(column, columnHeaders) : (0, _titleCase2.default)(column)
              });
            })
          )
        )
      );
    }
  }]);

  return DataTable;
}(_react2.default.Component);

DataTable.propTypes = {
  /** Adds additional class name(s). */
  className: _propTypes2.default.string,

  /** <p>Column title override that takes an array of objects. It matches the key columnName value to the columns prop and will replace it with key displayName value.</p>Example <code>[{ columnName: "price", displayName: "Price USD" }]</code> */
  columnHeaders: _propTypes2.default.array,

  /** <p>Set column widths via array for each column.</p>Example <code>[100, 150, 200, 250]</code> */
  columnWidths: _propTypes2.default.array,

  /** <p>An array of columns to be displayed. Each string in the array corresponds to a property in the data object. Automatic title casing works using the key values to create column titles. Camel casing will result in a space between the words unless overwritten by columnHeaders. </p>Example: If the data object has properties for yearVehicleManufactured, make, model, and price, to display a table with just year and make: <code>["yearVehicleManufactured", "make"]</code>.  yearVehicleManufactured will show as Year Vehicle Manufactured. */
  columns: _propTypes2.default.array.isRequired,

  /** An array of objects to be displayed. Each item in this array will be rendered as a row in the table. The specific properties displayed is configured via the columns prop. */
  data: _propTypes2.default.array.isRequired,

  /** Display filter input when set to true. */
  displayFilter: _propTypes2.default.bool,

  /** Display Pagination when set to true. If set to false, all data will be shown in the table on one page. */
  displayPagination: _propTypes2.default.bool,

  /** Display settings option when set to true. Settings have the option of changing the results per page. */
  displaySettings: _propTypes2.default.bool,

  /** Globally unique and descriptive HTML ID. Used by QA for automated testing. */
  htmlId: _propTypes2.default.string.isRequired,

  /** Override default rows to be displayed.  Default is the first value of pageSizeOptions array. */
  pageSize: _propTypes2.default.number,

  /** An array options to pick from in rows per page dropdown under settings. */
  pageSizeOptions: _propTypes2.default.array
};

DataTable.defaultProps = {
  pageSizeOptions: [5, 10, 25, 50, 100],
  displayFilter: true,
  displayPagination: true,
  displaySettings: false
};

exports.default = DataTable;