'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gtmUtilities = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactGoogleTagManager = require('react-google-tag-manager');

var _reactGoogleTagManager2 = _interopRequireDefault(_reactGoogleTagManager);

var _GtmUtilities = require('./GtmUtilities');

var _GtmUtilities2 = _interopRequireDefault(_GtmUtilities);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The GoogleTagManager component is a standardized way to implement GoogleTagManager in a Fusion application.
 * By adding this component and referencing 'utils/googleTagManager', you have access to all of the power of GoogleTagManager.
 * Full usage documentation can be found <a href=https://coxautosoftwaredivision.atlassian.net/wiki/display/VST/Analytics+Guide+-+Google+Tag+Manager+and+Google+Analytics>here</a>.
 */

var GoogleTagManager = function (_React$Component) {
  _inherits(GoogleTagManager, _React$Component);

  function GoogleTagManager() {
    _classCallCheck(this, GoogleTagManager);

    return _possibleConstructorReturn(this, (GoogleTagManager.__proto__ || Object.getPrototypeOf(GoogleTagManager)).apply(this, arguments));
  }

  _createClass(GoogleTagManager, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _props = this.props,
          dataLayerName = _props.dataLayerName,
          scriptId = _props.scriptId;


      if (!window[dataLayerName]) {
        var gtmScriptNode = document.getElementById(scriptId);
        eval(gtmScriptNode.textContent); // eslint-disable-line no-eval
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var gtm = (0, _reactGoogleTagManager2.default)({
        id: this.props.gtmId,
        dataLayerName: this.props.dataLayerName || 'dataLayer',
        additionalEvents: this.props.additionalEvents || {}
      });

      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          'div',
          null,
          gtm.noScriptAsReact()
        ),
        _react2.default.createElement(
          'div',
          { id: this.props.scriptId },
          gtm.scriptAsReact()
        )
      );
    }
  }]);

  return GoogleTagManager;
}(_react2.default.Component);

GoogleTagManager.defaultProps = {
  dataLayerName: 'dataLayer',
  scriptId: 'react-google-tag-manager-gtm'
};

GoogleTagManager.propTypes = {
  /** If you need to import additional event data for the start event, you can do so here. Example: <pre><code>  {
    "event": "LoadEvent",
    "appName": "Vin CRM",
    "eventCategory": "DemoEvent",
    "eventElement": "Page",
    "eventAction": "load page",
    "eventResult": "Page loaded",
    "eventValue": 1
  }</code></pre> */
  additionalEvents: _propTypes2.default.object,

  /** Override default dataLayer name. */
  dataLayerName: _propTypes2.default.string,

  /** Unique GoogleTagManager id associated with your application. */
  gtmId: _propTypes2.default.string.isRequired,

  /** Identifier of the tag wrapping the GTM code. */
  scriptId: _propTypes2.default.string
};

exports.gtmUtilities = _GtmUtilities2.default;
exports.default = GoogleTagManager;