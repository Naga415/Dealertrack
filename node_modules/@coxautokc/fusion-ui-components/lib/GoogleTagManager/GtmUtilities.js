'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initalizeAnalytics = initalizeAnalytics;
exports.convertToSentenceCase = convertToSentenceCase;
exports.setAnalyticsDimension = setAnalyticsDimension;
exports.sendAnalyticsEvent = sendAnalyticsEvent;
/** this file uses the datalayer to push events to GTM */
/* global dataLayer */

/**
 * The name of the event to fire; this should match the trigger defined in Google Tag Manager.
 */
var _eventName = 'userEvent';

/**
 * The name of the application to associate with all logged events.
 */
var _appName = 'Vin CRM';

/**
 * The custom Dimensions object will track any custom dimensions that are set for the page.
 * This will include information about the logged in dealer, user, role, etc.
 */
var _customDimensions = {};

/**
 * A set of constants that define known facts that can be added to your analytics.
 */
var customDimensionName = exports.customDimensionName = {
  DEALER_ID: 'dealerId',
  USER_ID: 'userId',
  USER_NAME: 'userName',
  USER_ROLE: 'userRole'
};

/**
 * Initializes analytics with the event that will be tracked and any available custom dimensions for the event.
 * @param {string} eventName The event that will be pushed to google tag manager.
 * @param {object} [customDimensions] Optional set of properties that google analytics should report on (dealerId, userId, userRole, etc).
 */
function initalizeAnalytics(eventName, appName, customDimensions) {
  _eventName = eventName;
  _appName = appName;

  // Push any values provided into _customDimensions
  if (customDimensionName) {
    for (var key in customDimensions) {
      if (customDimensions.hasOwnProperty(key)) {
        setAnalyticsDimension(key, customDimensions[key]);
      }
    }
  }
}

/**
 * Capitalizes the first letter of the string and converts the rest to lower-case.
 * @param {string} str The string value to convert.
 */
function convertToSentenceCase(str) {
  if (str) {
    return str.charAt(0).toUpperCase() + str.substr(1).toLowerCase();
  } else {
    return '';
  }
}

/**
 * Maintain a set of key value pairs that match the custom dimensions in google tag manager
 * If the key already exists, it will be updated with value.
 * If the key does not exist, it will add the key and value to the customDimensions
 * @param {string} key The name of the data layer variable for the dimension.
 * @param {*} value The value of the custom dimension. The value will be included in all future analytics events.
 */
function setAnalyticsDimension(key, value) {
  _customDimensions[key] = value;
}

/**
 * Push an event into Google Tag Manager.
 * @param {string} eventCategory Example: 'Customer Record 2.0' the top level categorization of what you want to report on written in plain english
 * @param {string} eventAction Example:'Email editor email sent' a short sentence representing what you want to track within the category
 * @param {string} eventResult Example:'Email sent'
 * @param {number} [value] The numeric value of the event. Must be a quantifiable value, not a qualitative one.
 */
function sendAnalyticsEvent(eventCategory, eventElement, eventAction, eventResult, value) {
  // TODO: allow the configuration of category, action, label, and value dynamically
  var eventDefinition = {
    event: _eventName,
    appName: _appName,
    eventCategory: eventCategory,
    eventElement: convertToSentenceCase(eventElement),
    eventAction: eventAction.toLowerCase(),
    eventResult: convertToSentenceCase(eventResult),
    eventValue: value
    // ,..._customDimensions
  };
  for (var nextKey in _customDimensions) {
    // Avoid bugs when hasOwnProperty is shadowed
    if (Object.prototype.hasOwnProperty.call(_customDimensions, nextKey)) {
      eventDefinition[nextKey] = _customDimensions[nextKey];
    }
  }
  dataLayer.push(eventDefinition);
}

exports.default = { customDimensionName: customDimensionName, sendAnalyticsEvent: sendAnalyticsEvent, setAnalyticsDimension: setAnalyticsDimension, initalizeAnalytics: initalizeAnalytics };