'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _NavItem = require('react-bootstrap/lib/NavItem');

var _NavItem2 = _interopRequireDefault(_NavItem);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ActionTab = function (_Component) {
  _inherits(ActionTab, _Component);

  function ActionTab() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ActionTab);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ActionTab.__proto__ || Object.getPrototypeOf(ActionTab)).call.apply(_ref, [this].concat(args))), _this), _this.componentDidMount = function () {
      var _this$props = _this.props,
          actionKey = _this$props.actionKey,
          getTabWidths = _this$props.getTabWidths;

      var width = _reactDom2.default.findDOMNode(_this.refs['actionNavItem' + actionKey]).clientWidth;
      getTabWidths(actionKey, width);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ActionTab, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          htmlId = _props.htmlId,
          actionKey = _props.actionKey,
          openToComponent = _props.openToComponent,
          onClick = _props.onClick,
          toggleMethod = _props.toggleMethod,
          onSelect = _props.onSelect,
          label = _props.label,
          icon = _props.icon,
          enable = _props.enable,
          classNames = _props.classNames,
          responsiveClasses = _props.responsiveClasses,
          actionLink = _props.actionLink,
          name = _props.name;

      return _react2.default.createElement(
        _NavItem2.default,
        {
          id: htmlId,
          onSelect: onSelect,
          eventKey: { actionKey: actionKey, actionLink: actionLink, name: name, openToComponent: openToComponent, onClick: onClick, toggleMethod: toggleMethod },
          className: classNames + ' ' + (responsiveClasses && responsiveClasses.button ? responsiveClasses.button : ''),
          disabled: !enable,
          ref: 'actionNavItem' + actionKey
        },
        icon && _react2.default.createElement(
          'span',
          { className: 'action-bar__button-icon \' + ' + (responsiveClasses && responsiveClasses.icon ? responsiveClasses.icon : '') },
          icon
        ),
        _react2.default.createElement(
          'span',
          { className: 'action-bar__button-label \' + ' + (responsiveClasses && responsiveClasses.label ? responsiveClasses.label : '') },
          label
        )
      );
    }
  }]);

  return ActionTab;
}(_react.Component);

ActionTab.propTypes = {
  actionKey: _propTypes2.default.number.isRequired,
  actionLink: _propTypes2.default.object,
  classNames: _propTypes2.default.string,
  enable: _propTypes2.default.bool.isRequired,
  getTabWidths: _propTypes2.default.func.isRequired,
  htmlId: _propTypes2.default.string.isRequired,
  icon: _propTypes2.default.node,
  label: _propTypes2.default.string.isRequired,
  name: _propTypes2.default.string,
  onClick: _propTypes2.default.func,
  onSelect: _propTypes2.default.func.isRequired,
  openToComponent: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.func]),
  responsiveClasses: _propTypes2.default.object,
  toggleMethod: _propTypes2.default.func
};

exports.default = ActionTab;