'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Button = require('@coxautokc/fusion-ui-components/lib/Button');

var _Button2 = _interopRequireDefault(_Button);

var _Collapse = require('react-bootstrap/lib/Collapse');

var _Collapse2 = _interopRequireDefault(_Collapse);

var _Plus = require('react-entypo/lib/entypo/Plus');

var _Plus2 = _interopRequireDefault(_Plus);

var _Badge = require('react-bootstrap/lib/Badge');

var _Badge2 = _interopRequireDefault(_Badge);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/** List container with heading, optional count, and integrated show more and add buttons. */
var ListContainer = function (_React$Component) {
  _inherits(ListContainer, _React$Component);

  function ListContainer(props) {
    _classCallCheck(this, ListContainer);

    var _this = _possibleConstructorReturn(this, (ListContainer.__proto__ || Object.getPrototypeOf(ListContainer)).call(this, props));

    _this.toggleList = function () {
      _this.setState({ listShowMore: !_this.state.listShowMore });
    };

    _this.defaultNoDataMessage = "No content available.";

    _this.state = {
      listShowMore: false
    };
    return _this;
  }

  _createClass(ListContainer, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          htmlId = _props.htmlId,
          list = _props.list,
          className = _props.className,
          header = _props.header,
          showCount = _props.showCount,
          displayAdd = _props.displayAdd,
          addAction = _props.addAction,
          displayShowMore = _props.displayShowMore,
          initialShowMore = _props.initialShowMore,
          noDataMessage = _props.noDataMessage,
          listItemSpacing = _props.listItemSpacing,
          enableAdd = _props.enableAdd,
          otherProps = _objectWithoutProperties(_props, ['htmlId', 'list', 'className', 'header', 'showCount', 'displayAdd', 'addAction', 'displayShowMore', 'initialShowMore', 'noDataMessage', 'listItemSpacing', 'enableAdd']);

      var mergedClasses = "list-container" + (className && ' ' + className) + (listItemSpacing ? ' separate-items' : ''); // concatenate default className with supplied prop
      var isData = list.length; // returns bool
      var noDataMessageToDisplay = typeof noDataMessage === 'string' ? noDataMessage : this.defaultNoDataMessage;

      // get items from an index range, output array
      var listItemRange = function listItemRange(startIndex, limit, arr) {
        var counter = 1;
        var index = startIndex;
        var outputList = [];
        var counterLimit = limit || arr.length;
        while (counter <= counterLimit) {
          if (!arr[index]) break;
          outputList.push(arr[index]);
          counter++;
          index++;
        }
        return outputList;
      };

      return _react2.default.createElement(
        'div',
        Object.assign({ className: mergedClasses }, otherProps, { id: htmlId }),
        _react2.default.createElement(
          'div',
          { className: 'list-container__header clearfix' },
          _react2.default.createElement(
            'h5',
            { className: 'list-container__header-title' },
            header,
            showCount && _react2.default.createElement(
              _Badge2.default,
              { className: 'list-container__header-count' },
              list.length
            )
          ),
          displayAdd && _react2.default.createElement(
            _Button2.default,
            { htmlId: htmlId + '-addItem', className: 'list-container__add-button', onClick: addAction, disabled: !enableAdd },
            _react2.default.createElement(_Plus2.default, { valign: true })
          )
        ),
        _react2.default.createElement(
          'div',
          { className: 'list-container__body' },
          this.props.children,
          isData ? !displayShowMore || initialShowMore >= list.length ? _react2.default.createElement(
            'div',
            { className: 'list-container__list-container' },
            _react2.default.createElement(
              'div',
              { className: 'list-container__list' },
              listItemRange(0, list.length, list)
            )
          ) : _react2.default.createElement(
            'div',
            { className: 'list-container__list-container' },
            _react2.default.createElement(
              'div',
              { className: 'list-container__list list-container__list-initial' },
              listItemRange(0, initialShowMore, list)
            ),
            _react2.default.createElement(
              _Collapse2.default,
              { 'in': this.state.listShowMore, className: 'list-container__list list-container__list-overflow' },
              _react2.default.createElement(
                'div',
                null,
                listItemRange(initialShowMore, list.length, list)
              )
            ),
            list.length > initialShowMore && _react2.default.createElement(
              _Button2.default,
              { htmlId: htmlId + '-toggleList', className: 'list-container__expand-button', block: true, onClick: this.toggleList },
              this.state.listShowMore ? 'Show Less' : 'Show More'
            )
          ) : noDataMessage && _react2.default.createElement(
            'div',
            { className: 'list-container__body--no-data' },
            _react2.default.createElement(
              'i',
              { className: 'text-muted' },
              noDataMessageToDisplay
            )
          )
        )
      );
    }
  }]);

  return ListContainer;
}(_react2.default.Component);

ListContainer.propTypes = {
  /** Callback for onClick of add button. */
  addAction: _propTypes2.default.func,

  /** Children components to pass. */
  children: _propTypes2.default.node,

  /** Optional className for component. */
  className: _propTypes2.default.string,

  /** Display add button when true. */
  displayAdd: _propTypes2.default.bool,

  /** Show 'Show more' button when true. */
  displayShowMore: _propTypes2.default.bool,

  /** Set to false to disable the add button */
  enableAdd: _propTypes2.default.bool,

  /** Title/header for List. */
  header: _propTypes2.default.string,

  /** Globally unique and descriptive HTML ID. Used by QA for automated testing. */
  htmlId: _propTypes2.default.string.isRequired,

  /** Number of list items to be shown above 'Show more' button. */
  initialShowMore: _propTypes2.default.number,

  /** Array of ListItems. */
  list: _propTypes2.default.array.isRequired,

  /** Add margin-bottom of 5px to each list item when true. */
  listItemSpacing: _propTypes2.default.bool,

  /** Message to show when no list items are present. */
  noDataMessage: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.bool]),

  /** Show number of list items in header when set to true. */
  showCount: _propTypes2.default.bool
};

ListContainer.defaultProps = {
  showCount: true,
  displayAdd: false,
  displayShowMore: true,
  initialShowMore: 3,
  noDataMessage: true,
  listItemSpacing: true,
  enableAdd: true
};

exports.default = ListContainer;