'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _FormGroup = require('react-bootstrap/lib/FormGroup');

var _FormGroup2 = _interopRequireDefault(_FormGroup);

var _Checkbox = require('react-bootstrap/lib/Checkbox');

var _Checkbox2 = _interopRequireDefault(_Checkbox);

var _HelpBlock = require('react-bootstrap/lib/HelpBlock');

var _HelpBlock2 = _interopRequireDefault(_HelpBlock);

var _Label = require('../internal/Label');

var _Label2 = _interopRequireDefault(_Label);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * CheckBoxList wraps the full Form group including the Label, validation for required input, and error message.
 */
var CheckBoxList = function (_React$Component) {
  _inherits(CheckBoxList, _React$Component);

  function CheckBoxList(props) {
    _classCallCheck(this, CheckBoxList);

    var _this = _possibleConstructorReturn(this, (CheckBoxList.__proto__ || Object.getPrototypeOf(CheckBoxList)).call(this, props));

    _this.getError = function (values) {
      var _this$props = _this.props,
          required = _this$props.required,
          error = _this$props.error,
          label = _this$props.label;

      if (error) {
        return error;
      } else if (values.length === 0 && required) {
        return label ? label + ' is required' : 'Field is required';
      } else {
        return '';
      }
    };

    _this.onChange = function (event) {
      var _event$target = event.target,
          name = _event$target.name,
          checked = _event$target.checked,
          value = _event$target.value;
      var selectedValues = _this.state.selectedValues;

      var values = [];
      if (checked) {
        values = [].concat(_toConsumableArray(selectedValues), [value]);
      } else {
        values = selectedValues.filter(function (val) {
          return val !== value;
        });
      }
      _this.setState({ error: _this.getError(values), selectedValues: values }, function () {
        _this.props.onChange({ target: { name: name, value: values } }, !_this.getError(values));
      });
    };

    _this.state = {
      error: _this.props.error || '',
      selectedValues: _this.props.values || []
    };
    return _this;
  }

  _createClass(CheckBoxList, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.error) {
        this.setState({ error: nextProps.error });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          className = _props.className,
          displayLabel = _props.displayLabel,
          htmlId = _props.htmlId,
          inline = _props.inline,
          label = _props.label,
          name = _props.name,
          options = _props.options,
          required = _props.required,
          values = _props.values;
      var error = this.state.error;


      return _react2.default.createElement(
        _FormGroup2.default,
        {
          className: className,
          validationState: error ? 'error' : null,
          controlId: htmlId
        },
        displayLabel && _react2.default.createElement(
          _Label2.default,
          {
            className: (0, _classnames2.default)(className, { inline: inline }),
            required: required,
            htmlId: htmlId + '-label'
          },
          label
        ),
        options.map(function (_ref) {
          var label = _ref.label,
              disabled = _ref.disabled,
              value = _ref.value,
              title = _ref.title;

          return _react2.default.createElement(
            _Checkbox2.default,
            Object.assign({
              inline: inline,
              className: 'selectInput',
              title: title,
              key: htmlId + '-' + value,
              id: htmlId,
              defaultChecked: values && values.indexOf(value) > -1,
              onChange: _this2.onChange
            }, { disabled: disabled, name: name, value: value }),
            label
          );
        }),
        error && _react2.default.createElement(
          _HelpBlock2.default,
          null,
          error
        )
      );
    }
  }]);

  return CheckBoxList;
}(_react2.default.Component);

CheckBoxList.propTypes = {
  /** Appended to the FormGroup. */
  className: _propTypes2.default.string,

  /** Displays label if set to true. */
  displayLabel: _propTypes2.default.bool,

  /** String to display when error occurs. */
  error: _propTypes2.default.string,

  /** Globally unique, descriptive ID. Used for automated testing. */
  htmlId: _propTypes2.default.string.isRequired,

  /** Display questions inline if set to true. */
  inline: _propTypes2.default.bool,

  /** Label text that shows above the select box. */
  label: _propTypes2.default.string,

  /** The FormControl name. */
  name: _propTypes2.default.string.isRequired,

  /** onChange callback. Called with <code>cb(event, isValid)</code>. Check isValid to determine if the control is in error. */
  onChange: _propTypes2.default.func.isRequired,

  /** An array of options as key value pairs: <code>[{value: 'ford', label: 'Ford'}, {value: 'gmc', label: 'GMC'}]</code> */
  options: _propTypes2.default.array.isRequired,

  /** Mark field as required with asterisk if true. */
  required: _propTypes2.default.bool,

  /** Selected items. */
  values: _propTypes2.default.array
};

CheckBoxList.defaultProps = {
  displayLabel: true
};

exports.default = CheckBoxList;