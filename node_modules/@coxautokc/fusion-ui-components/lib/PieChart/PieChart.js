'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _d = require('d3');

var _d2 = _interopRequireDefault(_d);

var _Legend = require('../internal/Legend');

var _Legend2 = _interopRequireDefault(_Legend);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/** Pie Chart */
var PieChart = function (_React$Component) {
  _inherits(PieChart, _React$Component);

  function PieChart(props) {
    _classCallCheck(this, PieChart);

    var _this = _possibleConstructorReturn(this, (PieChart.__proto__ || Object.getPrototypeOf(PieChart)).call(this, props));

    _this.updateSize = function () {
      var node = _reactDom2.default.findDOMNode(_this);
      var parentWidth = node.offsetWidth;
      parentWidth < _this.props.width ? _this.setState({
        width: parentWidth,
        height: parentWidth
      }) : _this.setState({
        width: _this.props.width,
        height: _this.props.height
      });
    };

    _this.state = {
      width: _this.props.width,
      height: _this.props.height
    };
    return _this;
  }

  _createClass(PieChart, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.repaintComponent();
      window.addEventListener('resize', this.updateSize, false);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      window.removeEventListener('resize', this.updateSize, false);
    }
  }, {
    key: 'repaintComponent',
    value: function repaintComponent() {
      var forceResize = this.updateSize;
      function onRepaint(callback) {
        setTimeout(function () {
          window.requestAnimationFrame(callback);
        }, 0);
      }
      onRepaint(forceResize);
    }
  }, {
    key: 'createChart',
    value: function createChart(_self) {
      if (this.props.colors) {
        this.color = _d2.default.scale.ordinal().range(this.props.colors);
      } else {
        this.color = _d2.default.scale.category10();
      }

      var pieHeight = _self.state.height;
      var pieWidth = void 0;
      if (_self.props.width < _self.state.width) {
        pieWidth = _self.props.width;
      } else {
        pieWidth = _self.state.width;
        pieHeight = _self.props.width;
      }

      var diameter = void 0;
      if (pieHeight < pieWidth) {
        diameter = pieHeight;
      } else {
        diameter = pieWidth;
      }
      var radius = diameter / 2;

      var outerRadius = radius;
      var innerRadius = radius * _self.props.innerRadiusRatio;
      var startAngle = _self.degreesToRadians(_self.props.startAngle);
      var endAngle = _self.degreesToRadians(_self.props.endAngle);

      this.arc = _d2.default.svg.arc().outerRadius(outerRadius).innerRadius(innerRadius);

      this.pie = _d2.default.layout.pie().startAngle(startAngle).endAngle(endAngle).value(function (d) {
        return d[_self.props.valueKey];
      });

      if (!this.props.enablePieSort) {
        this.pie.sort(null);
      }

      this.transform = 'translate(' + radius + ',' + radius + ')';
    }
  }, {
    key: 'degreesToRadians',
    value: function degreesToRadians(d) {
      return Math.PI / 180 * d;
    }
  }, {
    key: 'render',
    value: function render() {
      this.createChart(this);

      var _self = this;

      var wedge = _self.pie(this.props.data).map(function (d, i) {
        var fill = _self.color(i);
        var centroid = _self.arc.centroid(d);
        var labelOffset = _self.props.labelOffset;
        var label = "translate(" + centroid[0] * labelOffset + "," + centroid[1] * labelOffset + ")";

        return _react2.default.createElement(
          'g',
          { key: i },
          _react2.default.createElement('path', {
            fill: fill,
            d: _self.arc(d) }),
          _self.props.showLabel ? _react2.default.createElement(
            'text',
            {
              transform: label,
              textAnchor: 'middle' },
            d.data[_self.props.valueKey]
          ) : null
        );
      });

      var customClassName = "";

      if (this.props.className) {
        customClassName = " " + this.props.className;
      }

      return _react2.default.createElement(
        'div',
        null,
        this.props.title && _react2.default.createElement(
          'h3',
          null,
          this.props.title
        ),
        _react2.default.createElement(
          'svg',
          { className: "rd3r-chart rd3r-pie-chart" + customClassName, id: this.props.htmlId, width: this.state.width, height: this.state.height },
          _react2.default.createElement(
            'g',
            { transform: this.transform },
            wedge
          )
        ),
        this.props.displayLegend && _react2.default.createElement(_Legend2.default, { data: this.props.data, labelKey: this.props.labelKey, colors: this.color })
      );
    }
  }]);

  return PieChart;
}(_react2.default.Component);

PieChart.propTypes = {
  /** Adds additional class name(s). */
  className: _propTypes2.default.string,

  /** Override colors for slices e.g. <code>["#084b62", "yellow", "#ab264b"]</code>. The number of colors should match the number of data series. */
  colors: _propTypes2.default.array,

  /** Data to be graphed. */
  data: _propTypes2.default.array.isRequired,

  /** Display legend. */
  displayLegend: _propTypes2.default.bool,

  /** Sort data slices from largest to smallest when true. Will display data slices in the order received when false. */
  enablePieSort: _propTypes2.default.bool,

  /** Ending angle (out of 360). */
  endAngle: _propTypes2.default.number,

  /** Graph height. */
  height: _propTypes2.default.number,

  /** Globally unique and descriptive HTML ID. Used by QA for automated testing. */
  htmlId: _propTypes2.default.string.isRequired,

  /** Inner radius as a percent of the outer radius. Values between 0 and 1. */
  innerRadiusRatio: _propTypes2.default.number,

  /** Data label key of key-value pair. */
  labelKey: _propTypes2.default.string,

  /** Label offset from center with 0 being the absolute center of the pie and 1 being middle of slice. */
  labelOffset: _propTypes2.default.number,

  /** Show slice value. */
  showLabel: _propTypes2.default.bool,

  /** Starting angle (out of 360). */
  startAngle: _propTypes2.default.number,

  /** Graph title. */
  title: _propTypes2.default.string,

  /** Data value key of key-value pair. */
  valueKey: _propTypes2.default.string,

  /** Graph max-width. */
  width: _propTypes2.default.number
};

PieChart.defaultProps = {
  width: 300,
  height: 300,
  valueKey: "value",
  labelKey: "label",
  showLabel: true,
  enablePieSort: true,
  labelOffset: 1,
  startAngle: 0,
  endAngle: 360,
  innerRadiusRatio: 0,
  displayLegend: true
};

exports.default = PieChart;