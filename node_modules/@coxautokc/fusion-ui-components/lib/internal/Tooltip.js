'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ToolTip = function ToolTip(_ref) {
  var tooltip = _ref.tooltip,
      bgColor = _ref.bgColor,
      chartWidth = _ref.chartWidth,
      chartHeight = _ref.chartHeight,
      margin = _ref.margin,
      xAxis = _ref.xAxis,
      xValue = _ref.xValue,
      yValue = _ref.yValue;

  var displayType = "none";
  var transform = "";
  var x = 0;
  var xOffset = 0;
  var yOffset = 0;
  var y = 0;
  var itemWidth = 0;
  var xAxisPadding = xAxis ? 0 : 15;
  var width = 150;
  var height = 70;
  var transformText = 'translate(' + width / 2 + ',' + (height / 2 - 5) + ')';
  var transformArrow = "";

  if (tooltip.display === true) {
    x = tooltip.pos.x;
    y = tooltip.pos.y;
    itemWidth = tooltip.pos.width;
    displayType = "block";

    if (margin) {
      var xPointLocation = tooltip.pos.x + width / 2 + margin.right + margin.left;
      if (xPointLocation > chartWidth) {
        xOffset = xPointLocation - chartWidth - xAxisPadding;
      } else if (tooltip.pos.x < width / 2) {
        xOffset = -(width / 2 - tooltip.pos.x - 15);
      }
    }

    if (tooltip.orientation === 'horizontal') {
      if (y <= height / 2) yOffset = 15;
      if (y + height > chartHeight) yOffset = -15;
      if (x > width) {
        transform = 'translate(' + (x - width - 13) + ',' + (y - height / 2 + yOffset) + ')';
        transformArrow = 'translate(' + width + ',' + (height / 2 + 10 - yOffset) + ') rotate(-90,0,0)';
      } else if (x <= width) {
        transform = 'translate(' + (x + itemWidth + 13) + ',' + (y - height / 2 + yOffset) + ')';
        transformArrow = 'translate(' + 0 + ',' + (height / 2 - 10 - yOffset) + ') rotate(90,0,0)';
      }
    } else {
      if (y > height) {
        transform = 'translate(' + (x - width / 2 - xOffset) + ',' + (y - height - 20) + ')';
        transformArrow = 'translate(' + (width / 2 - 10 + xOffset) + ',' + (height - 1) + ')';
      } else if (y <= height) {
        transform = 'translate(' + (x - width / 2 - xOffset) + ',' + (Math.round(y) + 20) + ')';
        transformArrow = 'translate(' + (width / 2 - 10 + xOffset) + ',' + 0 + ') rotate(180,10,0)';
      }
    }
  }

  return _react2.default.createElement(
    'g',
    { transform: transform, style: { display: displayType } },
    _react2.default.createElement('rect', { className: 'shadow', width: width, height: height, rx: '5', ry: '5', fill: bgColor, opacity: '.9' }),
    _react2.default.createElement('polygon', { className: 'shadow', points: '0,0  20,0  10,10', transform: transformArrow, fill: bgColor, opacity: '.9' }),
    _react2.default.createElement(
      'text',
      { transform: transformText },
      _react2.default.createElement(
        'tspan',
        { x: '0', textAnchor: 'middle', fontSize: '15px', fill: '#ffffff' },
        xValue + tooltip.data.key
      ),
      _react2.default.createElement(
        'tspan',
        { x: '0', textAnchor: 'middle', dy: '25', fontSize: '20px', fill: '#ffffff' },
        yValue + tooltip.data.value
      )
    )
  );
};

ToolTip.propTypes = {
  bgColor: _propTypes2.default.string,
  chartHeight: _propTypes2.default.number,
  chartWidth: _propTypes2.default.number,
  margin: _propTypes2.default.object,
  tooltip: _propTypes2.default.object,
  xAxis: _propTypes2.default.bool,
  xValue: _propTypes2.default.string,
  yValue: _propTypes2.default.string
};

ToolTip.defaultProps = {
  bgColor: "#000000"
};

exports.default = ToolTip;