'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _FormGroup = require('react-bootstrap/lib/FormGroup');

var _FormGroup2 = _interopRequireDefault(_FormGroup);

var _HelpBlock = require('react-bootstrap/lib/HelpBlock');

var _HelpBlock2 = _interopRequireDefault(_HelpBlock);

var _InputGroup = require('react-bootstrap/lib/InputGroup');

var _InputGroup2 = _interopRequireDefault(_InputGroup);

var _Label = require('../Label');

var _Label2 = _interopRequireDefault(_Label);

var _reactTextMask = require('react-text-mask');

var _reactTextMask2 = _interopRequireDefault(_reactTextMask);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/** Abstraction over Bootstrap text input to enforce consistency in validation, required field marker, and labels */
var TextInput = function (_Component) {
  _inherits(TextInput, _Component);

  function TextInput(props) {
    _classCallCheck(this, TextInput);

    var _this = _possibleConstructorReturn(this, (TextInput.__proto__ || Object.getPrototypeOf(TextInput)).call(this, props));

    _this.getErrorMsg = function (value) {
      var error = _this.error;


      if (_this.props.required && value.length === 0) {
        return error.required;
      } else if (_this.props.error && _this.props.error.length > 0) {
        return error.invalid;
      } else if (_this.props.minLength && value.length < _this.props.minLength) {
        return error.minLength;
      } else {
        return error.success;
      }
    };

    _this.onBlur = function (event) {
      if (!(_this.state.warning && !_this.didEditField)) {
        _this.didInteractWithField = true;
        _this.onChange(event);
      }
      if (_this.props.onBlur) {
        _this.props.onBlur();
      }
    };

    _this.onChange = function (event) {
      var value = event.target.value;

      var error = _this.getErrorMsg(value);

      _this.didEditField = true;
      _this.didInteractWithField = true;

      _this.props.onMaskedInputChange(value, !error);
      _this.setState({ error: error, warning: '' });
    };

    _this.didInteractWithField = !!_this.props.error;
    _this.didEditField = false;
    _this.error = {
      success: '',
      required: _this.props.label + ' is Required',
      invalid: _this.props.error,
      minLength: _this.props.minLength + ' ' + (_this.props.minLength > 1 ? 'Characters' : 'Character') + ' Required'
    };
    _this.state = {
      warning: _this.props.warning || '',
      error: _this.props.error || ''
    };
    return _this;
  }

  _createClass(TextInput, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps !== this.props) {
        if (nextProps.error.length > 0) {
          this.setState({ error: nextProps.error });
        }
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          className = _props.className,
          disabled = _props.disabled,
          displayLabel = _props.displayLabel,
          htmlId = _props.htmlId,
          label = _props.label,
          mask = _props.mask,
          name = _props.name,
          placeholder = _props.placeholder,
          required = _props.required,
          value = _props.value,
          maxLength = _props.maxLength,
          minLength = _props.minLength;
      var _state = this.state,
          error = _state.error,
          warning = _state.warning;

      var isError = this.didInteractWithField && error.length > 0;

      // If children are passed we need to wrap in an InputGroup
      var formControl = _react2.default.createElement(_reactTextMask2.default, {
        id: htmlId + 'maskedInput',
        className: 'form-control',
        disabled: disabled,
        guide: true,
        mask: mask,
        name: name,
        onBlur: this.onBlur,
        onChange: this.onChange,
        placeholder: placeholder ? placeholder : "Enter " + label,
        value: value,
        maxLength: maxLength
      });

      return _react2.default.createElement(
        _FormGroup2.default,
        {
          controlId: htmlId,
          className: className,
          validationState: isError ? 'error' : warning ? 'warning' : null },
        displayLabel && _react2.default.createElement(
          _Label2.default,
          {
            className: className,
            required: required,
            htmlId: htmlId + '-label'
          },
          label
        ),
        children ? _react2.default.createElement(
          _InputGroup2.default,
          null,
          ' ',
          formControl,
          children
        ) : formControl,
        (minLength || isError) && _react2.default.createElement(
          _HelpBlock2.default,
          null,
          ' ',
          minLength ? minLength + ' ' + (minLength > 1 ? 'Characters' : 'character') + ' Required' : this.state.error,
          ' '
        ),
        !isError && warning && _react2.default.createElement(
          _HelpBlock2.default,
          null,
          ' ',
          warning,
          ' '
        )
      );
    }
  }]);

  return TextInput;
}(_react.Component);

TextInput.propTypes = {
  /** Any children to be passed through */
  children: _propTypes2.default.node,

  /** Additional class name */
  className: _propTypes2.default.string,

  /** Set to true to disable the MaskedInput. */
  disabled: _propTypes2.default.bool,

  /** Boolean displays label if set to true. */
  displayLabel: _propTypes2.default.bool,

  /** String to display when error occurs. */
  error: _propTypes2.default.string,

  /** ID of HTML element */
  htmlId: _propTypes2.default.string.isRequired,

  /** Input label */
  label: _propTypes2.default.string.isRequired,

  /** Mask template for the text box */
  mask: _propTypes2.default.oneOfType([_propTypes2.default.array, _propTypes2.default.func, _propTypes2.default.bool, _propTypes2.default.shape({
    mask: _propTypes2.default.oneOfType([_propTypes2.default.array, _propTypes2.default.func]),
    pipe: _propTypes2.default.func
  })]).isRequired,

  /** Maximum length of characters allowed */
  maxLength: _propTypes2.default.number,

  /** Minimum number of characters required. */
  minLength: _propTypes2.default.number,

  /** Input name */
  name: _propTypes2.default.string.isRequired,

  /** onBlur callback. */
  onBlur: _propTypes2.default.func,

  /** Function to call onFocus */
  onFocus: _propTypes2.default.func,

  /** Function to call onChange */
  onMaskedInputChange: _propTypes2.default.func.isRequired,

  /** Placeholder to display when empty */
  placeholder: _propTypes2.default.string,

  /** Mark label with asterisk and perform required field validation on blur if set to true */
  required: _propTypes2.default.bool,

  /** Input type */
  type: _propTypes2.default.oneOf(['text', 'number', 'date', 'password', 'textarea']),

  /** Text input value */
  value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]).isRequired,

  /** String to display in warning senarios. */
  warning: _propTypes2.default.string
};

TextInput.defaultProps = {
  displayLabel: true
};

exports.default = TextInput;