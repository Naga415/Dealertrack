'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _d = require('d3');

var _d2 = _interopRequireDefault(_d);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Dots = function (_React$Component) {
  _inherits(Dots, _React$Component);

  function Dots(props) {
    _classCallCheck(this, Dots);

    var _this = _possibleConstructorReturn(this, (Dots.__proto__ || Object.getPrototypeOf(Dots)).call(this, props));

    _this.state = {
      stroke: _this.props.stroke
    };
    return _this;
  }

  _createClass(Dots, [{
    key: 'render',
    value: function render() {
      var _self = this;

      var data = [];

      if (this.props.removeFirstAndLast) {
        for (var i = 1; i < _self.props.data.length - 1; ++i) {
          data[i - 1] = _self.props.data[i];
        }
      } else {
        data = _self.props.data;
      }

      var circles = data.map(function (d, i) {
        var xDataKeys = d[_self.props.xDataKey];

        if (xDataKeys instanceof Date) {
          xDataKeys = _d2.default.time.format(_self.props.dateFormat)(d[_self.props.xDataKey]);
        }

        return _react2.default.createElement('circle', {
          className: 'data-plot-point',
          r: _self.props.r,
          cx: _self.props.x(d[_self.props.xDataKey]),
          cy: _self.props.y(d[_self.props.yDataKey]),
          fill: _self.props.fill,
          stroke: _self.props.stroke,
          strokeWidth: _self.props.strokeWidth,
          key: i,
          onMouseOver: _self.props.showToolTip,
          onMouseOut: _self.props.hideToolTip,
          'data-key': xDataKeys,
          'data-value': d[_self.props.yDataKey] });
      });

      return _react2.default.createElement(
        'g',
        null,
        circles
      );
    }
  }]);

  return Dots;
}(_react2.default.Component);

Dots.propTypes = {
  data: _propTypes2.default.array,
  dateFormat: _propTypes2.default.string,
  fill: _propTypes2.default.string,
  r: _propTypes2.default.number,
  removeFirstAndLast: _propTypes2.default.bool,
  stroke: _propTypes2.default.string,
  strokeWidth: _propTypes2.default.number,
  x: _propTypes2.default.func,
  xDataKey: _propTypes2.default.string.isRequired,
  y: _propTypes2.default.func,
  yDataKey: _propTypes2.default.string.isRequired
};

Dots.defaultProps = {
  fill: "#b1bfb7",
  strokeWidth: 2,
  r: 5,
  dateFormat: '%e %b %Y'
};

exports.default = Dots;