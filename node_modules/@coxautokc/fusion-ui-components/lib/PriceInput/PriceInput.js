'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _MaskedInput = require('../internal/MaskedInput');

var _MaskedInput2 = _interopRequireDefault(_MaskedInput);

var _createNumberMask = require('text-mask-addons/dist/createNumberMask');

var _createNumberMask2 = _interopRequireDefault(_createNumberMask);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * <ul>
 * <li>PriceInput provides masking and validation.</li>
 * <li>It includes the full Form group including
 * the Label, Control, and helpText.</li>
 * <li>It handles its own
 * required validation but can be overwritten by passing in error on props.</li>
 * <li>PriceInput passes back both value (unmasked) and maskedValue on event.target.</li>
 * <li>onChange will also include a second param (isValid) flagging the current error state of the component.</li>
 * </ul>
 */

var PriceInput = function (_React$Component) {
  _inherits(PriceInput, _React$Component);

  function PriceInput(props) {
    _classCallCheck(this, PriceInput);

    var _this = _possibleConstructorReturn(this, (PriceInput.__proto__ || Object.getPrototypeOf(PriceInput)).call(this, props));

    _this.getMask = function () {
      return (0, _createNumberMask2.default)({
        prefix: '$',
        suffix: '',
        includeThousandsSeparator: true,
        thousandsSeparatorSymbol: ',',
        allowDecimal: true,
        decimalSymbol: '.',
        decimalLimit: 2,
        integerLimit: null,
        requireDecimal: false,
        allowNegative: _this.props.allowNegative,
        allowLeadingZeroes: false
      });
    };

    _this.unmask = function (value) {
      return value ? value.replace(',', '') : value;
    };

    _this.onChange = function (maskedValue, isValid) {
      var value = _this.unmask(maskedValue);
      _this.props.onChange({ target: { name: _this.props.name, value: value, maskedValue: maskedValue } }, isValid);
    };

    _this.mask = _this.getMask();
    _this.state = {
      error: _this.props.error || ''
    };
    return _this;
  }

  _createClass(PriceInput, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          className = _props.className,
          displayLabel = _props.displayLabel,
          htmlId = _props.htmlId,
          label = _props.label,
          name = _props.name,
          placeholder = _props.placeholder,
          required = _props.required,
          value = _props.value;

      return _react2.default.createElement(_MaskedInput2.default, {
        className: className,
        displayLabel: displayLabel,
        error: this.state.error,
        htmlId: htmlId,
        label: label,
        mask: this.mask,
        maxLength: 20,
        name: name,
        required: required,
        onMaskedInputChange: this.onChange,
        placeholder: placeholder,
        value: value
      });
    }
  }]);

  return PriceInput;
}(_react2.default.Component);

PriceInput.propTypes = {
  /** Allows negative value if set to true. */
  allowNegative: _propTypes2.default.bool,

  /** Additional class name. */
  className: _propTypes2.default.string,

  /** Display label if set to true. */
  displayLabel: _propTypes2.default.bool,

  /** If error is coming from parent component,
   * use this prop to pass the error message.
   * This prop will overwrite the 'Dollar amount is required' and
   * 'Dollar amount is Invalid' errors until it is cleared. */
  error: _propTypes2.default.string,

  /** Globally unique and descriptive HTML ID. Used by QA for automated testing. */
  htmlId: _propTypes2.default.string.isRequired,

  /** Input label. */
  label: _propTypes2.default.string.isRequired,

  /** Input name. */
  name: _propTypes2.default.string.isRequired,

  /** onChange callback. Called with <code>cb(event, isValid)</code>. Check isValid to determine if the control is in error. */
  onChange: _propTypes2.default.func.isRequired,

  /** Placeholder to display when empty.  eg: 'Enter Price' */
  placeholder: _propTypes2.default.string,

  /** Mark label with asterisk and perform
   * required field validation on blur if set to true. */
  required: _propTypes2.default.bool,

  /** Text input value. */
  value: _propTypes2.default.string.isRequired
};

PriceInput.defaultProps = {
  allowNegative: false
};
exports.default = PriceInput;