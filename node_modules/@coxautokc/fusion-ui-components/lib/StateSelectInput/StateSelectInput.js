'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _SelectInput = require('../SelectInput');

var _SelectInput2 = _interopRequireDefault(_SelectInput);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var usStates = [{ value: 'AL', label: 'Alabama' }, { value: 'AK', label: 'Alaska' }, { value: 'AZ', label: 'Arizona' }, { value: 'AR', label: 'Arkansas' }, { value: 'CA', label: 'California' }, { value: 'CO', label: 'Colorado' }, { value: 'CT', label: 'Connecticut' }, { value: 'DE', label: 'Delaware' }, { value: 'DC', label: 'District Of Columbia' }, { value: 'FL', label: 'Florida' }, { value: 'GA', label: 'Georgia' }, { value: 'HI', label: 'Hawaii' }, { value: 'ID', label: 'Idaho' }, { value: 'IL', label: 'Illinois' }, { value: 'IN', label: 'Indiana' }, { value: 'IA', label: 'Iowa' }, { value: 'KS', label: 'Kansas' }, { value: 'KY', label: 'Kentucky' }, { value: 'LA', label: 'Louisiana' }, { value: 'ME', label: 'Maine' }, { value: 'MD', label: 'Maryland' }, { value: 'MA', label: 'Massachusetts' }, { value: 'MI', label: 'Michigan' }, { value: 'MN', label: 'Minnesota' }, { value: 'MS', label: 'Mississippi' }, { value: 'MO', label: 'Missouri' }, { value: 'MT', label: 'Montana' }, { value: 'NE', label: 'Nebraska' }, { value: 'NV', label: 'Nevada' }, { value: 'NH', label: 'New Hampshire' }, { value: 'NJ', label: 'New Jersey' }, { value: 'NM', label: 'New Mexico' }, { value: 'NY', label: 'New York' }, { value: 'NC', label: 'North Carolina' }, { value: 'ND', label: 'North Dakota' }, { value: 'OH', label: 'Ohio' }, { value: 'OK', label: 'Oklahoma' }, { value: 'OR', label: 'Oregon' }, { value: 'PA', label: 'Pennsylvania' }, { value: 'PR', label: 'Puerto Rico' }, { value: 'RI', label: 'Rhode Island' }, { value: 'SC', label: 'South Carolina' }, { value: 'SD', label: 'South Dakota' }, { value: 'TN', label: 'Tennessee' }, { value: 'TX', label: 'Texas' }, { value: 'UT', label: 'Utah' }, { value: 'VT', label: 'Vermont' }, { value: 'VA', label: 'Virginia' }, { value: 'WA', label: 'Washington' }, { value: 'WV', label: 'West Virginia' }, { value: 'WI', label: 'Wisconsin' }, { value: 'WY', label: 'Wyoming' }];

var canadianProvinces = [{ value: 'AB', label: 'Alberta' }, { value: 'BC', label: 'British Columbia' }, { value: 'MB', label: 'Manitoba' }, { value: 'NB', label: 'New Brunswick' }, { value: 'NL', label: 'Newfoundland and Labrador' }, { value: 'NT', label: 'Northwest Territories' }, { value: 'NS', label: 'Nova Scotia' }, { value: 'NU', label: 'Nunavut' }, { value: 'ON', label: 'Ontario' }, { value: 'PE', label: 'Prince Edward Island' }, { value: 'QC', label: 'Quebec' }, { value: 'SK', label: 'Saskatchewan' }, { value: 'YT', label: 'Yukon' }];

/** Abstraction over React-Bootstrap's select dropdown with options to show US states + territories, Canadian provinces, or both */
var StatesDropDown = function StatesDropDown(_ref) {
  var country = _ref.country,
      displayLabel = _ref.displayLabel,
      label = _ref.label,
      rest = _objectWithoutProperties(_ref, ['country', 'displayLabel', 'label']);

  var states = country === "Canada" ? canadianProvinces : country === "All" ? usStates.concat(canadianProvinces).sort(sortStates) : usStates;
  return _react2.default.createElement(_SelectInput2.default, Object.assign({
    displayLabel: displayLabel,
    label: label || (country === 'Canada' ? 'Province' : 'State'),
    options: states
  }, rest));
};

StatesDropDown.propTypes = {
  /** Additional &lt;option&gt;. Will replace the default top option "Select ...". */
  children: _propTypes2.default.node,

  /** CSS class to apply to the FormGroup. */
  className: _propTypes2.default.string,

  /** Country of choice. Options: 'US, 'Canada' or 'All'.  Anything else is ignored and sets to US. */
  country: _propTypes2.default.oneOf(["Canada", "US", "All"]),

  /** Boolean displays label if set to true. */
  displayLabel: _propTypes2.default.bool,

  /** Globally unique, descriptive ID. Used for automated testing. */
  htmlId: _propTypes2.default.string.isRequired,

  /** Label to override the default label. Defaults to "State" for US and "Province" for Canada. */
  label: _propTypes2.default.string,

  /** FormControl name. */
  name: _propTypes2.default.string.isRequired,

  /** onChange callback. Called with <code>cb(event, isValid)</code>. Check isValid to determine if the control is in error. */
  onChange: _propTypes2.default.func.isRequired,

  /** Perform validation on blur and mark field as required with asterisk if true. */
  required: _propTypes2.default.bool,

  /** Sets value, set by state/province abbreviation. */
  value: _propTypes2.default.string
};

StatesDropDown.defaultProps = {
  country: 'US'
};

exports.default = StatesDropDown;


function sortStates(a, b) {
  if (a.label < b.label) return -1;
  if (a.label > b.label) return 1;
  return 0;
}