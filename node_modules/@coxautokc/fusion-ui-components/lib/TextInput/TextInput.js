'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _FormControl = require('react-bootstrap/lib/FormControl');

var _FormControl2 = _interopRequireDefault(_FormControl);

var _FormGroup = require('react-bootstrap/lib/FormGroup');

var _FormGroup2 = _interopRequireDefault(_FormGroup);

var _HelpBlock = require('react-bootstrap/lib/HelpBlock');

var _HelpBlock2 = _interopRequireDefault(_HelpBlock);

var _InputGroup = require('react-bootstrap/lib/InputGroup');

var _InputGroup2 = _interopRequireDefault(_InputGroup);

var _Label = require('../internal/Label');

var _Label2 = _interopRequireDefault(_Label);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/** Abstraction over Bootstrap text input to enforce consistency in
 *  validation, required field marker, and labels. */
var TextInput = function (_Component) {
  _inherits(TextInput, _Component);

  function TextInput(props) {
    _classCallCheck(this, TextInput);

    var _this = _possibleConstructorReturn(this, (TextInput.__proto__ || Object.getPrototypeOf(TextInput)).call(this, props));

    _this.getErrorMsg = function (label, value) {
      if (_this.props.required && value.length === 0) {
        return label + ' is Required';
      } else if (_this.props.error && _this.props.error.length > 0) {
        return _this.props.error;
      } else {
        return '';
      }
    };

    _this.onBlur = function (event) {
      // warning
      if (!(_this.state.warning && !_this.didEditField)) {
        _this.didInteractWithField = true;
        _this.onTextInputChange(event);
      }

      if (_this.props.onBlur) {
        _this.props.onBlur();
      }
    };

    _this.onTextInputChange = function (event) {
      var value = event.target.value;

      var error = _this.getErrorMsg(_this.props.label, value);
      _this.didEditField = true;
      _this.didInteractWithField = true;

      _this.props.onChange({ target: { name: _this.props.name, value: value } }, !error);
      _this.setState({ error: error, warning: '' });
    };

    _this.didInteractWithField = !!_this.props.error;
    _this.didEditField = false;
    _this.state = {
      warning: _this.props.warning || '',
      error: _this.props.error || ''
    };
    return _this;
  }

  _createClass(TextInput, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps !== this.props) {
        if (nextProps.error !== this.props.error) {
          this.setState({ error: nextProps.error || '' });
        } else if (nextProps.label !== this.props.label) {
          this.setState({ error: this.getErrorMsg(nextProps.label, nextProps.value || '') });
        }
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          htmlId = _props.htmlId,
          className = _props.className,
          displayLabel = _props.displayLabel,
          name = _props.name,
          label = _props.label,
          type = _props.type,
          required = _props.required,
          placeholder = _props.placeholder,
          onChange = _props.onChange,
          value = _props.value,
          maxLength = _props.maxLength,
          children = _props.children,
          props = _objectWithoutProperties(_props, ['htmlId', 'className', 'displayLabel', 'name', 'label', 'type', 'required', 'placeholder', 'onChange', 'value', 'maxLength', 'children']);
      // To avoid passing warning, error as props to FormControl. Warning, error props are unknown to FormControl.


      delete props.warning;
      delete props.error;
      var _state = this.state,
          error = _state.error,
          warning = _state.warning;

      var isError = this.didInteractWithField && error.length > 0;

      return _react2.default.createElement(
        _FormGroup2.default,
        {
          controlId: htmlId,
          className: className,
          validationState: isError ? 'error' : warning ? 'warning' : null },
        displayLabel && _react2.default.createElement(
          _Label2.default,
          {
            className: className,
            required: required,
            htmlId: htmlId + '-label' },
          label
        ),
        children ? _react2.default.createElement(
          _InputGroup2.default,
          null,
          _react2.default.createElement(_FormControl2.default, Object.assign({
            name: name,
            type: type || "text",
            componentClass: type === 'textarea' ? type : 'input',
            placeholder: placeholder ? placeholder : "Enter " + label,
            value: value,
            maxLength: maxLength,
            onChange: this.onTextInputChange,
            onBlur: this.onBlur,
            required: required
          }, props)),
          children
        ) : _react2.default.createElement(_FormControl2.default, Object.assign({
          name: name,
          type: type || "text",
          componentClass: type === 'textarea' ? type : 'input',
          placeholder: placeholder ? placeholder : "Enter " + label,
          value: value,
          maxLength: maxLength,
          onChange: this.onTextInputChange,
          onBlur: this.onBlur,
          required: required
        }, props)),
        isError && _react2.default.createElement(
          _HelpBlock2.default,
          null,
          error
        ),
        !isError && warning && _react2.default.createElement(
          _HelpBlock2.default,
          null,
          warning
        )
      );
    }
  }]);

  return TextInput;
}(_react.Component);

TextInput.propTypes = {
  /** Any children to be passed through. */
  children: _propTypes2.default.node,

  /** Additional class name. */
  className: _propTypes2.default.string,

  /** Boolean displays label if set to true. */
  displayLabel: _propTypes2.default.bool,

  /** String to display when error occurs. */
  error: _propTypes2.default.string,

  /** Globally unique and descriptive HTML ID. Used by QA for automated testing. */
  htmlId: _propTypes2.default.string.isRequired,

  /** Input label. */
  label: _propTypes2.default.string.isRequired,

  /** Maximum length of characters allowed. */
  maxLength: _propTypes2.default.number,

  /** Input name. */
  name: _propTypes2.default.string.isRequired,

  /** onBlur callback. */
  onBlur: _propTypes2.default.func,

  /** onChange callback. Called with <code>cb(event, isValid)</code>. Check isValid to determine if the control is in error. */
  onChange: _propTypes2.default.func.isRequired,

  /** Function to call onFocus. */
  onFocus: _propTypes2.default.func,

  /** Placeholder to display when empty. */
  placeholder: _propTypes2.default.string,

  /** Mark label with asterisk and perform required field validation on blur if set to true. */
  required: _propTypes2.default.bool,

  /** Input type. Accepts 'password', 'text', or 'textarea'.<br/>
   * For number inputs, use <a href="#NumericInput">NumericInput</a>.<br/>
   * For email inputs, use <a href="#EmailInput">EmailInput</a>.<br/>
   * For date inputs, use <a href="#DatePicker">DatePicker</a>. */
  type: _propTypes2.default.oneOf(['password', 'text', 'textarea']),

  /** Text input value. */
  value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]).isRequired,

  /** String to display in warning senarios. */
  warning: _propTypes2.default.string
};

TextInput.defaultProps = {
  displayLabel: true
};

exports.default = TextInput;