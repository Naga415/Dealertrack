'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _FormControl = require('react-bootstrap/lib/FormControl');

var _FormControl2 = _interopRequireDefault(_FormControl);

var _FormGroup = require('react-bootstrap/lib/FormGroup');

var _FormGroup2 = _interopRequireDefault(_FormGroup);

var _HelpBlock = require('react-bootstrap/lib/HelpBlock');

var _HelpBlock2 = _interopRequireDefault(_HelpBlock);

var _Label = require('../internal/Label');

var _Label2 = _interopRequireDefault(_Label);

var _InputGroup = require('react-bootstrap/lib/InputGroup');

var _InputGroup2 = _interopRequireDefault(_InputGroup);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Select input control. Wraps the full Form group including
 * the Label, Control, and helpText. SelectInput handles its own
 * required validation but can be overridden by passing in error on props.
 */
var SelectInput = function (_React$Component) {
  _inherits(SelectInput, _React$Component);

  function SelectInput(props) {
    _classCallCheck(this, SelectInput);

    var _this = _possibleConstructorReturn(this, (SelectInput.__proto__ || Object.getPrototypeOf(SelectInput)).call(this, props));

    _initialiseProps.call(_this);

    _this.state = {
      error: _this.props.error || ''
    };
    return _this;
  }

  _createClass(SelectInput, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.error) {
        this.setState({ error: nextProps.error });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          className = _props.className,
          displayLabel = _props.displayLabel,
          htmlId = _props.htmlId,
          label = _props.label,
          required = _props.required,
          children = _props.children;
      var error = this.state.error;


      return _react2.default.createElement(
        _FormGroup2.default,
        {
          className: className,
          validationState: error ? 'error' : null,
          controlId: htmlId
        },
        displayLabel && _react2.default.createElement(
          _Label2.default,
          {
            className: className,
            required: required,
            htmlId: htmlId + '-label'
          },
          label
        ),
        children ? _react2.default.createElement(
          _InputGroup2.default,
          null,
          this.getFormControl(),
          children
        ) : this.getFormControl(),
        error && _react2.default.createElement(
          _HelpBlock2.default,
          null,
          error
        )
      );
    }
  }]);

  return SelectInput;
}(_react2.default.Component);

var _initialiseProps = function _initialiseProps() {
  var _this2 = this;

  this.getError = function (value) {
    var _props2 = _this2.props,
        required = _props2.required,
        error = _props2.error,
        label = _props2.label;

    if (error) {
      return error;
    } else if (value === '' && required) {
      return label ? label + ' is required' : 'Field is required';
    } else {
      return '';
    }
  };

  this.onChange = function (event) {
    var _event$target = event.target,
        name = _event$target.name,
        value = _event$target.value;

    _this2.setState({ error: _this2.getError(value) }, function () {
      _this2.props.onChange({ target: { name: name, value: value } }, !_this2.getError(value));
    });
  };

  this.onBlur = function (event) {
    _this2.setState({ error: _this2.getError(event.target.value) });
  };

  this.getFormControl = function () {
    var _props3 = _this2.props,
        className = _props3.className,
        displayLabel = _props3.displayLabel,
        displayPlaceholder = _props3.displayPlaceholder,
        htmlId = _props3.htmlId,
        label = _props3.label,
        name = _props3.name,
        onChange = _props3.onChange,
        options = _props3.options,
        required = _props3.required,
        value = _props3.value,
        disabled = _props3.disabled,
        children = _props3.children,
        props = _objectWithoutProperties(_props3, ['className', 'displayLabel', 'displayPlaceholder', 'htmlId', 'label', 'name', 'onChange', 'options', 'required', 'value', 'disabled', 'children']);

    var placeholder = props.placeholder;

    if (!placeholder && label) {
      placeholder = 'Select ' + label;
    } else if (!placeholder && !label) {
      placeholder = 'Select';
    }

    return _react2.default.createElement(
      _FormControl2.default,
      {
        className: 'selectInput',
        id: htmlId,
        name: name,
        componentClass: 'select',
        value: value,
        onChange: _this2.onChange,
        disabled: disabled,
        onBlur: _this2.onBlur },
      displayPlaceholder && _react2.default.createElement(
        'option',
        { value: '' },
        placeholder
      ),
      options.map(function (_ref) {
        var value = _ref.value,
            label = _ref.label;

        return _react2.default.createElement(
          'option',
          { key: value, value: value },
          label ? label : value
        );
      })
    );
  };
};

SelectInput.propTypes = {
  /** Any children to be passed through. */
  children: _propTypes2.default.node,

  /** Appended to the FormGroup. */
  className: _propTypes2.default.string,

  /** Set to true to disable the selectInput. */
  disabled: _propTypes2.default.bool,

  /** Displays label if set to true. */
  displayLabel: _propTypes2.default.bool,

  /** Hides placeholder if set to false. */
  displayPlaceholder: _propTypes2.default.bool,

  /** String to display when error occurs. */
  error: _propTypes2.default.string,

  /** Globally unique, descriptive ID. Used for automated testing. */
  htmlId: _propTypes2.default.string.isRequired,

  /** Label text that shows above the select box. */
  label: _propTypes2.default.string,

  /** FormControl name. */
  name: _propTypes2.default.string.isRequired,

  /** onChange callback. Called with <code>cb(event, isValid)</code>. Check isValid to determine if the control is in error. */
  onChange: _propTypes2.default.func.isRequired,

  /** An array of options as key value pairs: <code>[{value:'1', label:'option 1'}]</code> or values: <code>[{value:'1'}]</code>. */
  options: _propTypes2.default.array.isRequired,

  /** Select box placeholder text that is displayed when no value is selected. Defaults to Select + label if empty. */
  placeholder: _propTypes2.default.string,

  /** Perform validation on blur and mark field as required with asterisk if true. */
  required: _propTypes2.default.bool,

  /** The value of the selected item. */
  value: _propTypes2.default.string
};

SelectInput.defaultProps = {
  displayLabel: true,
  displayPlaceholder: true
};

exports.default = SelectInput;