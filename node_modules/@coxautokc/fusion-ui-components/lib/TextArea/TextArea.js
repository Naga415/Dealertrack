'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _TextInput = require('../TextInput');

var _TextInput2 = _interopRequireDefault(_TextInput);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/** TextArea input to enforce consistency in validation, required field marker, and labels */
var TextArea = function (_Component) {
  _inherits(TextArea, _Component);

  function TextArea() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, TextArea);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TextArea.__proto__ || Object.getPrototypeOf(TextArea)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      error: _this.props.error || ""
    }, _this.onChange = function (event, isValid) {
      var value = event.target.value;

      _this.props.onChange({ target: { name: _this.props.name, value: value } }, isValid);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(TextArea, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          className = _props.className,
          displayLabel = _props.displayLabel,
          error = _props.error,
          htmlId = _props.htmlId,
          label = _props.label,
          maxLength = _props.maxLength,
          name = _props.name,
          onChange = _props.onChange,
          placeholder = _props.placeholder,
          required = _props.required,
          rows = _props.rows,
          value = _props.value,
          props = _objectWithoutProperties(_props, ['className', 'displayLabel', 'error', 'htmlId', 'label', 'maxLength', 'name', 'onChange', 'placeholder', 'required', 'rows', 'value']);

      return _react2.default.createElement(_TextInput2.default, Object.assign({
        displayLabel: displayLabel,
        className: className,
        error: this.state.error,
        htmlId: htmlId,
        label: label,
        maxLength: maxLength,
        name: name,
        onChange: this.onChange,
        placeholder: placeholder,
        required: required,
        rows: rows,
        type: 'textarea',
        value: value
      }, props));
    }
  }]);

  return TextArea;
}(_react.Component);

TextArea.propTypes = {
  /** Additional class name. */
  className: _propTypes2.default.string,

  /** Displays label when set to true. */
  displayLabel: _propTypes2.default.bool,

  /** String to display when error occurs. */
  error: _propTypes2.default.string,

  /** Globally unique and descriptive HTML ID. Used by QA for automated testing. */
  htmlId: _propTypes2.default.string.isRequired,

  /** Input label. */
  label: _propTypes2.default.string,

  /** Maximum number of characters allowed. */
  maxLength: _propTypes2.default.number,

  /** Input name. */
  name: _propTypes2.default.string.isRequired,

  /** onChange callback. Called with <code>cb(event, isValid)</code>. Check isValid to determine if the control is in error. */
  onChange: _propTypes2.default.func.isRequired,

  /** Placeholder to display when empty. */
  placeholder: _propTypes2.default.string,

  /** Mark label with asterisk and perform required field validation on blur if set to true. */
  required: _propTypes2.default.bool,

  /** Set the visible height of the textarea, in lines. */
  rows: _propTypes2.default.number,

  /** Textarea input value. */
  value: _propTypes2.default.string.isRequired
};

TextArea.defaultProps = {
  displayLabel: true
};

exports.default = TextArea;