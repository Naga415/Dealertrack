'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** Step Indicator component. */
var StepIndicator = function StepIndicator(_ref) {
  var htmlId = _ref.htmlId,
      className = _ref.className,
      labels = _ref.labels,
      step = _ref.step,
      activeStep = _ref.activeStep;

  return _react2.default.createElement(
    'ul',
    { className: "tracker " + (className ? className : ""), id: htmlId },
    labels.map(function (label, i) {
      var status = activeStep && activeStep > i + 1 ? "complete" : activeStep === i + 1 ? "active" : "";
      return _react2.default.createElement(
        'li',
        { key: label, className: 'tracker__item' + (status ? ' tracker__item-' + status : ''), 'data-trackerindex': step },
        _react2.default.createElement(
          'div',
          { className: 'tracker__step' },
          i + 1
        ),
        _react2.default.createElement(
          'div',
          { className: 'tracker__label' },
          label
        )
      );
    })
  );
};

StepIndicator.propTypes = {
  /** Set active step number. Each step to the left (smaller index) of the active item will automatically be set to "completed". A value of '0' will set all to grey/'incomplete' */
  activeStep: _propTypes2.default.number.isRequired,

  /** Additional classes to add to <ul> */
  className: _propTypes2.default.string,

  /** Globally unique and descriptive HTML ID. Used by QA for automated testing. */
  htmlId: _propTypes2.default.string.isRequired,

  /** Determines the number of steps, and each item becomes the label of each corresponding step (in order). */
  labels: _propTypes2.default.array.isRequired,

  /** Value for data-trackerindex. */
  step: _propTypes2.default.string
};

exports.default = StepIndicator;