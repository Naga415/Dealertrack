'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactTruncate = require('react-truncate');

var _reactTruncate2 = _interopRequireDefault(_reactTruncate);

var _Tooltip = require('react-bootstrap/lib/Tooltip');

var _Tooltip2 = _interopRequireDefault(_Tooltip);

var _OverlayTrigger = require('react-bootstrap/lib/OverlayTrigger');

var _OverlayTrigger2 = _interopRequireDefault(_OverlayTrigger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/** Wrap a string with this component to truncate the text to a specified number of lines. */
var TruncateText = function (_Component) {
  _inherits(TruncateText, _Component);

  function TruncateText() {
    _classCallCheck(this, TruncateText);

    var _this = _possibleConstructorReturn(this, (TruncateText.__proto__ || Object.getPrototypeOf(TruncateText)).call(this));

    _this.toggleLines = function (event) {
      event.preventDefault();
      _this.setState(function (prevState) {
        return { expanded: !prevState.expanded };
      });
    };

    _this.state = {
      expanded: false
    };
    return _this;
  }

  _createClass(TruncateText, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          htmlId = _props.htmlId,
          lines = _props.lines,
          displayToolTip = _props.displayToolTip,
          ellipsis = _props.ellipsis,
          expandAnchorText = _props.expandAnchorText,
          collapseAnchorText = _props.collapseAnchorText,
          displayTruncatedText = _props.displayTruncatedText;

      var styles = { display: 'block', whiteSpace: 'nowrap', textOverflow: 'ellipsis', overflow: 'hidden' };
      if (!lines && displayToolTip) {
        return _react2.default.createElement(
          _OverlayTrigger2.default,
          { trigger: ['hover', 'click'], placement: 'top', overlay: _react2.default.createElement(
              _Tooltip2.default,
              { id: htmlId + '-Tooltip' },
              children
            ) },
          _react2.default.createElement(
            'div',
            { id: htmlId, className: 'truncate-singleline', style: styles },
            children
          )
        );
      } else if (!lines) {
        return _react2.default.createElement(
          'div',
          { id: htmlId, className: 'truncate-singleline', style: styles },
          children
        );
      } else {
        return _react2.default.createElement(
          'div',
          null,
          _react2.default.createElement(
            _reactTruncate2.default,
            {
              lines: displayTruncatedText ? !this.state.expanded && lines : lines,
              ellipsis: displayTruncatedText ? _react2.default.createElement(
                'a',
                { href: '', onClick: this.toggleLines },
                ' ',
                expandAnchorText,
                ' '
              ) : ellipsis },
            children
          ),
          this.state.expanded && _react2.default.createElement(
            'span',
            null,
            ' ',
            _react2.default.createElement(
              'a',
              { href: '', onClick: this.toggleLines },
              ' ',
              collapseAnchorText,
              ' '
            )
          )
        );
      }
    }
  }]);

  return TruncateText;
}(_react.Component);

TruncateText.propTypes = {
  /** Content to be truncated passed as children. */
  children: _propTypes2.default.node,

  /** The text to display in the anchor element that collapses the expanded text. */
  collapseAnchorText: _propTypes2.default.string,

  /** Display full text in tooltip when hovered / clicked over truncated text when set to true. */
  displayToolTip: _propTypes2.default.bool,

  /** Expand truncated text when set to true. */
  displayTruncatedText: _propTypes2.default.bool,

  /** An ellipsis that is added to the end of the text in case it is truncated. Displays standard horizontal ellipsis by default (...). */
  ellipsis: _propTypes2.default.node,

  /** The text to display in the anchor element that expands the collapsed text. */
  expandAnchorText: _propTypes2.default.string,

  /** Globally unique and descriptive HTML ID. Used by QA for automated testing. */
  htmlId: _propTypes2.default.string.isRequired,

  /** Number of lines after which text should be truncated. */
  lines: _propTypes2.default.number
};

TruncateText.defaultProps = {
  displayToolTip: false,
  expandAnchorText: "Show more",
  collapseAnchorText: "Show less"
};

exports.default = TruncateText;