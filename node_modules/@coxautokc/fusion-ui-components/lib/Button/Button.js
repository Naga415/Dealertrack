'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Button = require('react-bootstrap/lib/Button');

var _Button2 = _interopRequireDefault(_Button);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/** Wrapper around React-Bootstrap Button. */
var Button = function Button(_ref) {
  var htmlId = _ref.htmlId,
      children = _ref.children,
      size = _ref.size,
      buttonStyle = _ref.buttonStyle,
      active = _ref.active,
      block = _ref.block,
      componentClass = _ref.componentClass,
      disabled = _ref.disabled,
      href = _ref.href,
      onClick = _ref.onClick,
      type = _ref.type,
      className = _ref.className,
      props = _objectWithoutProperties(_ref, ['htmlId', 'children', 'size', 'buttonStyle', 'active', 'block', 'componentClass', 'disabled', 'href', 'onClick', 'type', 'className']);

  return _react2.default.createElement(
    _Button2.default,
    Object.assign({
      id: htmlId,
      bsSize: size,
      bsStyle: buttonStyle,
      active: active,
      block: block,
      componentClass: componentClass,
      disabled: disabled,
      href: href,
      onClick: onClick,
      type: type,
      className: className
    }, props),
    children
  );
};

Button.propTypes = {
  /** Set button to active state, when true. */
  active: _propTypes2.default.bool,

  /** Create block level buttonsâ€”those that span the full width of a parent, when set to true. */
  block: _propTypes2.default.bool,

  /** Component visual or contextual style variants. One of <code>'success', 'warning', 'danger', 'info', 'default', 'primary', 'link'</code>.*/
  buttonStyle: _propTypes2.default.oneOf(['success', 'warning', 'danger', 'info', 'default', 'primary', 'link']),

  /** Any child components. */
  children: _propTypes2.default.node,

  /** Component className. */
  className: _propTypes2.default.string,

  /** Use a custom element for this component. */
  componentClass: _propTypes2.default.string,

  /** Disables the button, when set to true. */
  disabled: _propTypes2.default.bool,

  /** Specify the destination URL when clicked. */
  href: _propTypes2.default.string,

  /** Globally unique and descriptive HTML ID. Used by QA for automated testing. */
  htmlId: _propTypes2.default.string.isRequired,

  /** onClick callback. Called with <code>cb(event)</code>. */
  onClick: _propTypes2.default.func,

  /** Component size variations. One of <code>'lg', 'large', 'sm', 'small', 'xs', 'xsmall'</code>. */
  size: _propTypes2.default.oneOf(['lg', 'large', 'sm', 'small', 'xs', 'xsmall']),

  /** Defines HTML button type attribute. One of <code>'button', 'reset', 'submit'</code> */
  type: _propTypes2.default.oneOf(['button', 'reset', 'submit'])
};

Button.defaultProps = {
  active: false,
  block: false,
  buttonStyle: 'default'
};

exports.default = Button;