'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _TextInput = require('../TextInput');

var _TextInput2 = _interopRequireDefault(_TextInput);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/** <li>Email input with integrated label and email format validation for onBlur and onChange. </li>
 * <li>Entering multiple email addresses is supported when 'allowMultiple' prop is set to true.</li>
 * <li>When entering multiple email addresses, either ';' or ',' can be used as separator. To specify separator, use prop delimiter.</li>
*/
var EmailInput = function (_Component) {
  _inherits(EmailInput, _Component);

  function EmailInput(props) {
    _classCallCheck(this, EmailInput);

    var _this = _possibleConstructorReturn(this, (EmailInput.__proto__ || Object.getPrototypeOf(EmailInput)).call(this, props));

    _initialiseProps.call(_this);

    _this.state = {
      error: _this.props.error || '',
      warning: _this.getWarningMessage(props)
    };
    return _this;
  }

  _createClass(EmailInput, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          className = _props.className,
          displayLabel = _props.displayLabel,
          htmlId = _props.htmlId,
          label = _props.label,
          maxLength = _props.maxLength,
          name = _props.name,
          placeholder = _props.placeholder,
          required = _props.required,
          value = _props.value;

      return _react2.default.createElement(_TextInput2.default, {
        children: children,
        className: className,
        displayLabel: displayLabel,
        error: this.state.error,
        warning: this.state.warning,
        htmlId: htmlId,
        label: label,
        maxLength: maxLength,
        name: name,
        onChange: this.onChange,
        placeholder: placeholder,
        required: required,
        value: value
      });
    }
  }]);

  return EmailInput;
}(_react.Component);

var _initialiseProps = function _initialiseProps() {
  var _this2 = this;

  this.getWarningMessage = function (props) {
    var allowMultiple = props.allowMultiple,
        delimiter = props.delimiter,
        value = props.value;

    if (value === '') return '';

    if (allowMultiple && value.indexOf(delimiter) > -1) {
      var emails = value.trim().split(delimiter);
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = emails[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var email = _step.value;

          if (!_this2.isEmailValid(email)) {
            return 'Received invalid email address';
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    } else {
      return !_this2.isEmailValid(value) ? "Received invalid email address" : '';
    }
    return '';
  };

  this.onChange = function (event, isValid) {
    var value = event.target.value;

    var error = _this2.getErrors(value);

    var isFieldValid = isValid && error.length <= 0;

    _this2.props.onChange({ target: { name: _this2.props.name, value: value } }, isFieldValid);
    _this2.setState({ error: error });
  };

  this.getErrors = function (value) {
    var _props2 = _this2.props,
        allowMultiple = _props2.allowMultiple,
        delimiter = _props2.delimiter;


    if (allowMultiple && value.indexOf(delimiter) > -1) {
      var emails = value.trim().split(delimiter);
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = emails[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var email = _step2.value;

          if (!_this2.isEmailValid(email)) {
            return 'Invalid Email';
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    } else {
      if (value.trim() === '') return '';
      return _this2.isEmailValid(value) ? '' : "Invalid Email";
    }
    return '';
  };

  this.isEmailValid = function (emailAddress) {
    if (emailAddress.trim() === '') return false;
    // Source: http://emailregex.com/
    // eslint-disable-next-line no-useless-escape
    var regEx = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return regEx.test(emailAddress.trim());
  };
};

EmailInput.propTypes = {

  /** Allow multiple email addresses when set to true. */
  allowMultiple: _propTypes2.default.bool,

  /** Any children to be passed through. */
  children: _propTypes2.default.node,

  /** Additional class name. */
  className: _propTypes2.default.string,

  /** Delimiter to separate multiple email addresses. */
  delimiter: _propTypes2.default.oneOf([',', ';']),

  /** Boolean displays label if set to true. */
  displayLabel: _propTypes2.default.bool,

  /** String to display when error occurs. */
  error: _propTypes2.default.string,

  /** Globally unique and descriptive HTML ID. Used by QA for automated testing. */
  htmlId: _propTypes2.default.string.isRequired,

  /** Input label. */
  label: _propTypes2.default.string.isRequired,

  /** Maximum length of characters allowed. */
  maxLength: _propTypes2.default.number.isRequired,

  /** Input name. */
  name: _propTypes2.default.string.isRequired,

  /** onChange callback. Called with <code>cb(event, isValid)</code>. Check isValid to determine if the control is in error. */
  onChange: _propTypes2.default.func.isRequired,

  /** Placeholder to display when empty. */
  placeholder: _propTypes2.default.string,

  /** Mark label with asterisk and perform required field validation on blur if set to true. */
  required: _propTypes2.default.bool,

  /** Email input value. */
  value: _propTypes2.default.string.isRequired
};

EmailInput.defaultProps = {
  allowMultiple: false,
  delimiter: ';'
};

exports.default = EmailInput;