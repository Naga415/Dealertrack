'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Panel = require('react-bootstrap/lib/Panel');

var _Panel2 = _interopRequireDefault(_Panel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/** <ul>
 * <li>Action Panel serves as the wrapping component of the markup you wish to include in ActionBar's openToComponent Prop.</li>
 * <li>This is only used when you have a collapsible panel.</li>
 * <li>No visible example is needed as this functionality is contained in ActionBar.</li>
 * </ul>
 */
var ActionPanel = function (_Component) {
  _inherits(ActionPanel, _Component);

  function ActionPanel() {
    _classCallCheck(this, ActionPanel);

    return _possibleConstructorReturn(this, (ActionPanel.__proto__ || Object.getPrototypeOf(ActionPanel)).apply(this, arguments));
  }

  _createClass(ActionPanel, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var children = this.props.children;

      if (Array.isArray(children)) {
        throw new Error('ActionWidget will only accept 1 child');
      } else {
        return children;
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          htmlId = _props.htmlId,
          showActionPanel = _props.showActionPanel;

      return _react2.default.createElement(
        _Panel2.default,
        { id: htmlId, className: 'action-bar__panel', collapsible: true, expanded: showActionPanel },
        _react2.default.createElement(
          'div',
          null,
          children
        )
      );
    }
  }]);

  return ActionPanel;
}(_react.Component);

ActionPanel.propTypes = {
  /** Will only accept 1 child. */
  children: _propTypes2.default.node.isRequired,

  /** Function used to close the panel. <br/><strong>You will not need to pass this, only receive it as ActionBar sets this.</strong>*/
  closePanel: _propTypes2.default.func.isRequired,

  /** Globally unique and descriptive HTML ID. Used by QA for automated testing. */
  htmlId: _propTypes2.default.string.isRequired,

  /** This is set to true by the ActionBar when the panel is visible. <br/><strong>You will not need to pass this, only receive it as ActionBar sets this.</strong>*/
  showActionPanel: _propTypes2.default.bool.isRequired
};

ActionPanel.defaultProps = {
  closePanel: function closePanel() {},
  htmlId: "",
  showActionPanel: false
};

exports.default = ActionPanel;