// @remove-on-eject-begin
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */
// @remove-on-eject-end
'use strict';

/** DO NOT REMOVE - ADDED FOR FUSION **/
require('./fusionExtensions/start');

// Do this as the first thing so that any code reading it knows the right env.
process.env.BABEL_ENV = 'development';
process.env.NODE_ENV = 'development';

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on('unhandledRejection', err => {
  throw err;
});

// Ensure environment variables are read.
require('../config/env');

const fs = require('fs');
const chalk = require('chalk');
const webpack = require('webpack');
const WebpackDevServer = require('webpack-dev-server');
const clearConsole = require('./fusion-dev-utils/clearConsole');
const checkRequiredFiles = require('./fusion-dev-utils/checkRequiredFiles');
const opn = require('opn');
const {
  choosePort,
  createCompiler,
  prepareProxy,
  prepareUrls,
} = require('./fusion-dev-utils/WebpackDevServerUtils');
const openBrowser = require('./fusion-dev-utils/openBrowser');
const paths = require('../config/paths');
const config = require('../config/webpack.config.dev');
const createDevServerConfig = require('../config/webpackDevServer.config');

const useYarn = fs.existsSync(paths.yarnLockFile);
const isInteractive = process.stdout.isTTY;

// Warn and crash if required files are missing
if (!checkRequiredFiles([paths.appHtml, paths.appIndexJs])) {
  process.exit(1);
}

// Tools like Cloud9 rely on this.
const DEFAULT_PORT = parseInt(process.env.PORT, 10) || 3000;
const HOST = process.env.HOST || '0.0.0.0';

// We attempt to use the default port but if it is busy, we offer the user to
// run on a different port. `detect()` Promise resolves to the next free port.
choosePort(HOST, DEFAULT_PORT)
  .then(port => {
    if (port == null) {
      /* FUSION CHANGE adding exit(0) here to close cleanly as error message has already been displayed */
      process.exit(0);
    }
    const protocol = process.env.HTTPS === 'true' ? 'https' : 'http';
    const appName = require(paths.appPackageJson).name;
    const urls = prepareUrls(protocol, HOST, port);
    // Create a webpack compiler that is configured with custom messages.
    const compiler = createCompiler(webpack, config, appName, urls, useYarn);
    // Load proxy config
    const proxySetting = require(paths.appPackageJson).proxy;
    const proxyConfig = prepareProxy(proxySetting, paths.appPublic);
    // Serve webpack assets generated by the compiler over a web sever.
    const serverConfig = createDevServerConfig(
      proxyConfig,
      urls.lanUrlForConfig
    );
    const devServer = new WebpackDevServer(compiler, serverConfig);
    // Launch WebpackDevServer.
    devServer.listen(port, HOST, err => {
      if (err) {
        return console.log(err);
      }
      if (isInteractive) {
        /** DISABLED FOR FUSION - DO NOT RE-ENABLE SINCE WE'RE WRITING TO CONSOLE FOR LINTING */
        // clearConsole();
      }
      /** DISABLED FOR FUSION */
      // console.log(chalk.cyan('Starting the development server...'));

      // ** THIS SECTION IS A FUSION ENHANCEMENT DO NOT REMOVE **
      openBrowserWithQuerystring(urls);
      // ** END FUSION SECTION **
    });

    ['SIGINT', 'SIGTERM'].forEach(function(sig) {
      process.on(sig, function() {
        devServer.close();
        process.exit();
      });
    });
  })
  .catch(err => {
    if (err && err.message) {
      console.log(err.message);
    }
    process.exit(1);
  });

// **THIS IS A FUSION ENHANCEMENT DO NOT REMOVE**
function openBrowserWithQuerystring(urls) {
  var querystring = getQuerystring();
  if (querystring) {
    // Calling opn directly because openBrowser doesn't honor the querystring.
    opn(urls.localUrlForBrowser + querystring);
  } else {
    openBrowser(urls.localUrlForBrowser);
  }
}

// **THIS IS A FUSION ENHANCEMENT DO NOT REMOVE**
// Get querystring passed as argument in package.json
// For example: given this input: "start": "fusion start --query=?customerId=1"
// Will return ?customerId=1
function getQuerystring() {
  var args = process.argv.slice(2);
  var querystring = '';
  args.forEach(function (arg, index, array) {
    if (arg.includes('--query=')) {
      querystring = arg.replace('--query=', '');
    }
  });
  return querystring;
}
