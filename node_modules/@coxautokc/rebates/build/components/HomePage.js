"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RebatesPostURL = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _cloneDeep = require("lodash/cloneDeep");

var _cloneDeep2 = _interopRequireDefault(_cloneDeep);

var _FullPageModal = require("@coxautokc/fusion-ui-components/lib/FullPageModal");

var _FullPageModal2 = _interopRequireDefault(_FullPageModal);

var _ModalFooter = require("./ModalFooter/ModalFooter");

var _ModalFooter2 = _interopRequireDefault(_ModalFooter);

var _RebatesFormHeader = require("./RebatesFormHeader/RebatesFormHeader");

var _RebatesFormHeader2 = _interopRequireDefault(_RebatesFormHeader);

var _RebatesFormElements = require("./RebatesFormElements/RebatesFormElements");

var _RebatesFormElements2 = _interopRequireDefault(_RebatesFormElements);

var _axios = require("axios");

var _axios2 = _interopRequireDefault(_axios);

require("./HomePage.scss");

require("font-awesome/css/font-awesome.css");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RebatesPostURL = exports.RebatesPostURL = "http://swaggerhub.np.aws.dealertrack.com/virts/Denzil-Tarakan/dealstransformers/1.0.0/123/quote/345/rebate/";

var HomePage = function (_Component) {
  _inherits(HomePage, _Component);

  function HomePage(props) {
    _classCallCheck(this, HomePage);

    var _this = _possibleConstructorReturn(this, (HomePage.__proto__ || Object.getPrototypeOf(HomePage)).call(this, props));

    _this.save = function () {
      var formHasErrors = _this.state.rebates.filter(function (r) {
        return r.type !== "DealerRebate";
      }).some(function (r) {
        return r.error;
      }) || _this.state.rebates.find(function (r) {
        return r.type === "DealerRebate";
      }).subElements.some(function (r) {
        return r.error;
      });

      if (formHasErrors) {
        _this.setState({ displayErrors: true });
        return;
      }

      var dataToSend = [];
      var totalValue = 0;
      _this.state.rebates.filter(function (r) {
        return r.type !== "DealerRebate";
      }).forEach(function (r) {
        var rawValue = _this.unformatRebateValue(r.amount);
        var parsedRawValue = parseFloat(rawValue);
        totalValue += parsedRawValue;
        dataToSend.push({
          rebateId: r.id,
          rebateType: r.type,
          rebateAmount: parsedRawValue !== 0 ? rawValue : ''
        });
      });

      _this.state.rebates.find(function (r) {
        return r.type === "DealerRebate";
      }).subElements.forEach(function (r) {
        var rawValue = _this.unformatRebateValue(r.amount);
        var parsedRawValue = parseFloat(rawValue);
        totalValue += parsedRawValue;
        dataToSend.push({
          rebateId: r.id,
          rebateType: "DealerRebate",
          rebateAmount: parsedRawValue !== 0 ? rawValue : ''
        });
      });

      _axios2.default.put(RebatesPostURL, dataToSend, {
        headers: { Authorization: "dt_test_token" }
      }).then(function () {
        _this.fetchedRebatesData = _this.state.rebates;
        _this.props.populateValue(_this.props.name, totalValue.toString());
        _this.props.closeDialog();
        // eslint-disable-next-line
        alert('Rebates updated Successfully.');
      }).catch(function () {});
    };

    _this.cancel = function () {
      _this.props.closeDialog();
      _this.setState({ rebates: _this.fetchedRebatesData });
    };

    _this.handleOnInputBlur = function (type, value, position) {
      var formattedValue = _this.formatRebateValue(value);
      _this.updateRebates(type, formattedValue, position);
    };

    _this.handleOnInputChange = function (type, value, position) {
      _this.updateRebates(type, value, position);
    };

    _this.handleOnAddDealerRebate = function () {
      var updatedRebates = (0, _cloneDeep2.default)(_this.state.rebates);
      var rebateToUpdate = updatedRebates.find(function (r) {
        return r.type === "DealerRebate";
      });
      rebateToUpdate.subElements.push({
        id: 0,
        amount: "0"
      });

      _this.setState({
        rebates: updatedRebates,
        displayErrors: false
      });
    };

    _this.handleOnRemoveDealerRebate = function (position) {
      var updatedRebates = (0, _cloneDeep2.default)(_this.state.rebates);
      var rebateToUpdate = updatedRebates.find(function (r) {
        return r.type === "DealerRebate";
      });
      rebateToUpdate.subElements.splice(position - 1, 1);

      _this.setState({
        rebates: updatedRebates,
        displayErrors: false
      });
    };

    _this.fetchedRebatesData = [];
    _this.state = {
      rebates: (0, _cloneDeep2.default)(HomePage.initRebates),
      displayErrors: false
    };
    return _this;
  }

  _createClass(HomePage, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      _axios2.default.get(RebatesPostURL, {
        headers: { Authorization: "dt_test_token" }
      }).then(function (response) {
        var updatedRebates = (0, _cloneDeep2.default)(HomePage.initRebates);
        var incentivesRebate = response.data.find(function (d) {
          return d.rebateType === "Incentives";
        });
        if (incentivesRebate) {
          var incentiveRebateToUpdate = updatedRebates.find(function (d) {
            return d.type = "Incentives";
          });
          incentiveRebateToUpdate.id = incentivesRebate.rebateId;
          incentiveRebateToUpdate.amount = _this2.formatRebateValue(incentivesRebate.rebateAmount.toString());
        }
        var loyaltyCashRebate = response.data.find(function (d) {
          return d.rebateType === "LoyaltyCash";
        });
        if (loyaltyCashRebate) {
          var loyaltyCashRebateToUpdate = updatedRebates.find(function (d) {
            return d.type === "LoyaltyCash";
          });
          loyaltyCashRebateToUpdate.id = loyaltyCashRebate.rebateId;
          loyaltyCashRebateToUpdate.amount = _this2.formatRebateValue(loyaltyCashRebate.rebateAmount.toString());
        }
        var dealerRebates = response.data.filter(function (d) {
          return d.rebateType === "DealerRebate";
        });
        if (dealerRebates.length) {
          var dealerRebateToUpdate = updatedRebates.find(function (d) {
            return d.type === "DealerRebate";
          });
          dealerRebateToUpdate.subElements = dealerRebates.map(function (r) {
            return {
              id: r.rebateId,
              amount: _this2.formatRebateValue(r.rebateAmount.toString())
            };
          });

          if (dealerRebateToUpdate.subElements.length < 4) {
            dealerRebateToUpdate.subElements.push({
              id: 0,
              amount: "0"
            });
          }
        }

        _this2.fetchedRebatesData = (0, _cloneDeep2.default)(updatedRebates);
        _this2.setState({ rebates: updatedRebates });
      });
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      var isModalAboutToOpen = nextProps.dialogStatus && !this.props.dialogStatus;
      var dealerRebates = this.state.rebates.find(function (r) {
        return r.type === "DealerRebate";
      }).subElements;
      if (isModalAboutToOpen && dealerRebates.length < 4 && parseFloat(this.unformatRebateValue(dealerRebates[dealerRebates.length - 1].amount)) !== 0) {
        var updatedRebates = (0, _cloneDeep2.default)(this.state.rebates);
        updatedRebates.find(function (r) {
          return r.type === "DealerRebate";
        }).subElements.push({
          id: 0,
          amount: "0"
        });
        this.fetchedRebatesData = (0, _cloneDeep2.default)(updatedRebates);
        this.setState({ rebates: updatedRebates });
      }
    }
  }, {
    key: "updateRebates",
    value: function updateRebates(type, value, position) {
      var updatedRebates = (0, _cloneDeep2.default)(this.state.rebates);
      var rebateToUpdate = updatedRebates.find(function (r) {
        return r.type === type;
      });
      if (type !== "DealerRebate") {
        rebateToUpdate.amount = value;
        rebateToUpdate.error = this.validateRebateValue(value);
      } else {
        var delaerRebateFieldToUpdate = rebateToUpdate.subElements[position - 1];
        delaerRebateFieldToUpdate.amount = value;
        delaerRebateFieldToUpdate.error = this.validateRebateValue(value);
      }

      this.setState({
        rebates: updatedRebates,
        displayErrors: false
      });
    }
  }, {
    key: "formatRebateValue",
    value: function formatRebateValue(value) {
      // change value to the format "1,000,000.00"
      var formattedValue = parseFloat(value.replace(/,/g, "")).toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

      formattedValue === "NaN" && (formattedValue = "");
      return formattedValue;
    }
  }, {
    key: "unformatRebateValue",
    value: function unformatRebateValue(value) {
      // Remove comma from number
      return value.replace(/,/g, "");
    }
  }, {
    key: "validateRebateValue",
    value: function validateRebateValue(value) {
      var rawValue = parseFloat(this.unformatRebateValue(value));
      return rawValue < 0 || rawValue > 99999.99;
    }
  }, {
    key: "render",
    value: function render() {
      var _props = this.props,
          closeDialog = _props.closeDialog,
          dialogStatus = _props.dialogStatus;


      return _react2.default.createElement(
        "div",
        null,
        _react2.default.createElement(
          _FullPageModal2.default,
          {
            htmlId: "Rebates-Modal",
            className: "sample-fullpage-modal",
            show: dialogStatus,
            header: _react2.default.createElement(
              _FullPageModal2.default.Title,
              null,
              "EDIT REBATES"
            ),
            onHide: closeDialog,
            footer: _react2.default.createElement(_ModalFooter2.default, {
              displayResetBtn: false,
              modalName: "rebates",
              save: this.save,
              cancel: this.cancel
            })
          },
          _react2.default.createElement(
            "div",
            null,
            _react2.default.createElement(_RebatesFormHeader2.default, null),
            _react2.default.createElement(_RebatesFormElements2.default, {
              rebates: this.state.rebates,
              onChange: this.handleOnInputChange,
              onBlur: this.handleOnInputBlur,
              onDealerRebateAdd: this.handleOnAddDealerRebate,
              onDealerRebateRemove: this.handleOnRemoveDealerRebate,
              showErrors: this.state.displayErrors
            })
          )
        )
      );
    }
  }]);

  return HomePage;
}(_react.Component);

HomePage.initRebates = [{
  id: 0,
  type: "Incentives",
  name: "Incentives",
  amount: "0"
}, {
  id: 0,
  type: "LoyaltyCash",
  name: "Loyalty Cash",
  amount: "0"
}, {
  type: "DealerRebate",
  name: "Dealer Rebate",
  subElements: [{
    id: 0,
    amount: "0"
  }]
}];
exports.default = HomePage;


HomePage.propTypes = {
  closeDialog: _propTypes2.default.func.isRequired,
  dialogStatus: _propTypes2.default.bool.isRequired,
  name: _propTypes2.default.string.isRequired,
  populateValue: _propTypes2.default.func.isRequired
};